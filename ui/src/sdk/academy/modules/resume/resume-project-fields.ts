/**
 * Fields for entity. Use this when creating forms in React/Angular,
 * instead of giving string to each one, use it from here, so in case of
 * updating any fields you don't loose it.
 */

export const ResumeProjectEntityFields = {
  visibility: "visibility",
  workspaceId: "workspaceId",
  linkerId: "linkerId",
  parentId: "parentId",
  uniqueId: "uniqueId",
  userId: "userId",
  translations: "translations",
  title: "title",
  description: "description",
  descriptionExcerpt: "descriptionExcerpt",
  technicalDescription: "technicalDescription",
  technicalDescriptionExcerpt: "technicalDescriptionExcerpt",
  typeId: "typeId",
  type: {
    visibility: "type.visibility",
    workspaceId: "type.workspaceId",
    linkerId: "type.linkerId",
    parentId: "type.parentId",
    uniqueId: "type.uniqueId",
    userId: "type.userId",
    translations: "type.translations",
    name: "type.name",
    rank: "type.rank",
    updated: "type.updated",
    created: "type.created",
    createdFormatted: "type.createdFormatted",
    updatedFormatted: "type.updatedFormatted",
  },
  type$: "type",
  attachmentsListId: "attachmentsListId",
  attachments: "attachments",
  start: "start",
  startFormatted: "startFormatted",
  end: "end",
  endFormatted: "endFormatted",
  workLocationId: "workLocationId",
  workLocation: {
    visibility: "workLocation.visibility",
    workspaceId: "workLocation.workspaceId",
    linkerId: "workLocation.linkerId",
    parentId: "workLocation.parentId",
    uniqueId: "workLocation.uniqueId",
    userId: "workLocation.userId",
    translations: "workLocation.translations",
    status: "workLocation.status",
    flag: "workLocation.flag",
    commonName: "workLocation.commonName",
    officialName: "workLocation.officialName",
    rank: "workLocation.rank",
    updated: "workLocation.updated",
    created: "workLocation.created",
    createdFormatted: "workLocation.createdFormatted",
    updatedFormatted: "workLocation.updatedFormatted",
  },
  workLocation$: "workLocation",
  companyLocationId: "companyLocationId",
  companyLocation: {
    visibility: "companyLocation.visibility",
    workspaceId: "companyLocation.workspaceId",
    linkerId: "companyLocation.linkerId",
    parentId: "companyLocation.parentId",
    uniqueId: "companyLocation.uniqueId",
    userId: "companyLocation.userId",
    translations: "companyLocation.translations",
    status: "companyLocation.status",
    flag: "companyLocation.flag",
    commonName: "companyLocation.commonName",
    officialName: "companyLocation.officialName",
    rank: "companyLocation.rank",
    updated: "companyLocation.updated",
    created: "companyLocation.created",
    createdFormatted: "companyLocation.createdFormatted",
    updatedFormatted: "companyLocation.updatedFormatted",
  },
  companyLocation$: "companyLocation",
  clientLocationId: "clientLocationId",
  clientLocation: {
    visibility: "clientLocation.visibility",
    workspaceId: "clientLocation.workspaceId",
    linkerId: "clientLocation.linkerId",
    parentId: "clientLocation.parentId",
    uniqueId: "clientLocation.uniqueId",
    userId: "clientLocation.userId",
    translations: "clientLocation.translations",
    status: "clientLocation.status",
    flag: "clientLocation.flag",
    commonName: "clientLocation.commonName",
    officialName: "clientLocation.officialName",
    rank: "clientLocation.rank",
    updated: "clientLocation.updated",
    created: "clientLocation.created",
    createdFormatted: "clientLocation.createdFormatted",
    updatedFormatted: "clientLocation.updatedFormatted",
  },
  clientLocation$: "clientLocation",
  links: "links",
  rank: "rank",
  updated: "updated",
  created: "created",
  createdFormatted: "createdFormatted",
  updatedFormatted: "updatedFormatted",
};
