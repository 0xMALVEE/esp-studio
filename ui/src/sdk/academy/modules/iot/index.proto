syntax = "proto3";
    option go_package = "./artifacts/academy-server/release-tsjs/modules/iot";

import "artifacts/academy-server/release-tsjs/core/common.proto";




  

  

  
      
service ComparisonTypes {
  rpc ComparisonTypeActionCreate (ComparisonTypeEntity) returns (ComparisonTypeCreateReply) {}
  rpc ComparisonTypeActionUpdate (ComparisonTypeEntity) returns (ComparisonTypeCreateReply) {}

  rpc ComparisonTypeActionQuery (QueryFilterRequest) returns (ComparisonTypeQueryReply) {}
  rpc ComparisonTypeActionGetOne (QueryFilterRequest) returns (ComparisonTypeReply) {}
  rpc ComparisonTypeActionRemove (QueryFilterRequest) returns (RemoveReply) {}
}

message ComparisonTypeCreateReply {
	ComparisonTypeEntity data  = 1;
	IError error = 2;
}

message ComparisonTypeReply {
	ComparisonTypeEntity data = 1;
	IError error = 2;
}

message ComparisonTypeQueryReply {
	repeated ComparisonTypeEntity items = 1;
	int64 totalItems = 2;
	int64 itemsPerPage = 3;
	int64 startIndex = 4;
	IError error = 5;
}





 
message ComparisonTypeEntity {
  optional string visibility = 1; // @tag(yaml:"visibility")
  optional string workspaceId = 2; // @tag(yaml:"workspaceId")
  optional string linkerId = 3; // @tag(yaml:"linkerId")
  optional string parentId = 4; // @tag(yaml:"parentId")
  string uniqueId = 5; // @tag(gorm:"primarykey;uniqueId;unique;not null;size:100;" yaml:"uniqueId")
  optional string userId = 6; // @tag(yaml:"userId")
  repeated ComparisonTypeEntityPolyglot translations = 7; // @tag(gorm:"foreignKey:LinkerId;references:UniqueId" json:"translations")
  optional string name = 9; // @tag(translate:"true"  yaml:"name"  )

  int64 rank = 10; // @tag(gorm:"type:int;name:rank")
  int64 updated = 11; // @tag(gorm:"autoUpdateTime:nano")
  int64 created = 12; // @tag(gorm:"autoUpdateTime:nano")
  string createdFormatted = 13; // @tag(sql:"-")
  string updatedFormatted = 14; // @tag(sql:"-")
}

/* Because it has translation field, we need a translation table for this */
message ComparisonTypeEntityPolyglot {
  string linkerId = 1; // @tag(gorm:"uniqueId;not null;size:100;" json:"linkerId" yaml:"linkerId")
  string languageId = 2; // @tag(gorm:"uniqueId;not null;size:100;" json:"languageId" yaml:"languageId")

  string name = 3; // @tag(yaml:"name" json:"name");

}












/**
* Add your custom services, and messages here.
* It can be your dto for example. 
* - Use Module.yml for entities, otherwise it won't be managed
* - Don't use this file for entities might be queried by web
**/
      




  

  

  
      
service DataNodes {
  rpc DataNodeActionCreate (DataNodeEntity) returns (DataNodeCreateReply) {}
  rpc DataNodeActionUpdate (DataNodeEntity) returns (DataNodeCreateReply) {}

  rpc DataNodeActionQuery (QueryFilterRequest) returns (DataNodeQueryReply) {}
  rpc DataNodeActionGetOne (QueryFilterRequest) returns (DataNodeReply) {}
  rpc DataNodeActionRemove (QueryFilterRequest) returns (RemoveReply) {}
}

message DataNodeCreateReply {
	DataNodeEntity data  = 1;
	IError error = 2;
}

message DataNodeReply {
	DataNodeEntity data = 1;
	IError error = 2;
}

message DataNodeQueryReply {
	repeated DataNodeEntity items = 1;
	int64 totalItems = 2;
	int64 itemsPerPage = 3;
	int64 startIndex = 4;
	IError error = 5;
}

;

;

;

;





 
message DataNodeEntity {
  optional string visibility = 1; // @tag(yaml:"visibility")
  optional string workspaceId = 2; // @tag(yaml:"workspaceId")
  optional string linkerId = 3; // @tag(yaml:"linkerId")
  optional string parentId = 4; // @tag(yaml:"parentId")
  string uniqueId = 5; // @tag(gorm:"primarykey;uniqueId;unique;not null;size:100;" yaml:"uniqueId")
  optional string userId = 6; // @tag(yaml:"userId")
  optional string name = 8; // @tag(  yaml:"name"  )

  optional string value = 9; // @tag(  yaml:"value"  )

  /* One 2 one to external entity */
  optional string typeId  = 11; // @tag(yaml:"typeId" )
  DataNodeTypeEntity type = 12; // @tag(gorm:"foreignKey:TypeId;references:UniqueId" json:"type" yaml:"type" fbtype:"one")

  /* One 2 one to external entity */
  optional string modeId  = 14; // @tag(yaml:"modeId" )
  DataNodeModeEntity mode = 15; // @tag(gorm:"foreignKey:ModeId;references:UniqueId" json:"mode" yaml:"mode" fbtype:"one")

  /* This is an object, another entity needs to be created for */
  /*repeated DataNodeReadersEntity readers = 16; // @tag(gorm:"foreignKey:LinkerId;references:UniqueId" yaml:"readers")*/
  repeated DataNodeReadersEntity readers = 16; // @tag(gorm:"foreignKey:LinkerId;references:UniqueId" yaml:"readers" fbtype:"array")

  /* This is an object, another entity needs to be created for */
  /*repeated DataNodeWritersEntity writers = 17; // @tag(gorm:"foreignKey:LinkerId;references:UniqueId" yaml:"writers")*/
  repeated DataNodeWritersEntity writers = 17; // @tag(gorm:"foreignKey:LinkerId;references:UniqueId" yaml:"writers" fbtype:"array")

  int64 rank = 18; // @tag(gorm:"type:int;name:rank")
  int64 updated = 19; // @tag(gorm:"autoUpdateTime:nano")
  int64 created = 20; // @tag(gorm:"autoUpdateTime:nano")
  string createdFormatted = 21; // @tag(sql:"-")
  string updatedFormatted = 22; // @tag(sql:"-")
}







  

 
message DataNodeReadersEntity {
  optional string visibility = 1; // @tag(yaml:"visibility")
  optional string workspaceId = 2; // @tag(yaml:"workspaceId")
  optional string linkerId = 3; // @tag(yaml:"linkerId")
  optional string parentId = 4; // @tag(yaml:"parentId")
  string uniqueId = 5; // @tag(gorm:"primarykey;uniqueId;unique;not null;size:100;" yaml:"uniqueId")
  optional string userId = 6; // @tag(yaml:"userId")
  /* One 2 one to external entity */
  optional string readerId  = 9; // @tag(yaml:"readerId" )
  NodeReaderEntity reader = 10; // @tag(gorm:"foreignKey:ReaderId;references:UniqueId" json:"reader" yaml:"reader" fbtype:"one")

  int64 rank = 11; // @tag(gorm:"type:int;name:rank")
  int64 updated = 12; // @tag(gorm:"autoUpdateTime:nano")
  int64 created = 13; // @tag(gorm:"autoUpdateTime:nano")
  string createdFormatted = 14; // @tag(sql:"-")
  string updatedFormatted = 15; // @tag(sql:"-")
}






  

 
message DataNodeWritersEntity {
  optional string visibility = 1; // @tag(yaml:"visibility")
  optional string workspaceId = 2; // @tag(yaml:"workspaceId")
  optional string linkerId = 3; // @tag(yaml:"linkerId")
  optional string parentId = 4; // @tag(yaml:"parentId")
  string uniqueId = 5; // @tag(gorm:"primarykey;uniqueId;unique;not null;size:100;" yaml:"uniqueId")
  optional string userId = 6; // @tag(yaml:"userId")
  /* One 2 one to external entity */
  optional string writerId  = 9; // @tag(yaml:"writerId" )
  NodeWriterEntity writer = 10; // @tag(gorm:"foreignKey:WriterId;references:UniqueId" json:"writer" yaml:"writer" fbtype:"one")

  /* This is an object, another entity needs to be created for */
  DataNodeWritersMqttTopicConfigEntity mqttTopicConfig = 11; // @tag(gorm:"foreignKey:LinkerId;references:UniqueId" yaml:"mqttTopicConfig" fbtype:"object")

  int64 rank = 12; // @tag(gorm:"type:int;name:rank")
  int64 updated = 13; // @tag(gorm:"autoUpdateTime:nano")
  int64 created = 14; // @tag(gorm:"autoUpdateTime:nano")
  string createdFormatted = 15; // @tag(sql:"-")
  string updatedFormatted = 16; // @tag(sql:"-")
}




  

 
message DataNodeWritersMqttTopicConfigEntity {
  optional string visibility = 1; // @tag(yaml:"visibility")
  optional string workspaceId = 2; // @tag(yaml:"workspaceId")
  optional string linkerId = 3; // @tag(yaml:"linkerId")
  optional string parentId = 4; // @tag(yaml:"parentId")
  string uniqueId = 5; // @tag(gorm:"primarykey;uniqueId;unique;not null;size:100;" yaml:"uniqueId")
  optional string userId = 6; // @tag(yaml:"userId")
  optional string topic = 8; // @tag(  yaml:"topic"  )

  optional string body = 9; // @tag(  yaml:"body"  )

  int64 rank = 10; // @tag(gorm:"type:int;name:rank")
  int64 updated = 11; // @tag(gorm:"autoUpdateTime:nano")
  int64 created = 12; // @tag(gorm:"autoUpdateTime:nano")
  string createdFormatted = 13; // @tag(sql:"-")
  string updatedFormatted = 14; // @tag(sql:"-")
}

















/**
* Add your custom services, and messages here.
* It can be your dto for example. 
* - Use Module.yml for entities, otherwise it won't be managed
* - Don't use this file for entities might be queried by web
**/
      
message WriteDatumDto {
    string uniqueId = 1;
    optional int64 valueInt64 = 2;
    optional double valueFloat64 = 3;
    optional string valueString = 4 ;
    optional bool valueBoolean = 5 ;

}



  

  

  
      
service DataNodeModes {
  rpc DataNodeModeActionCreate (DataNodeModeEntity) returns (DataNodeModeCreateReply) {}
  rpc DataNodeModeActionUpdate (DataNodeModeEntity) returns (DataNodeModeCreateReply) {}

  rpc DataNodeModeActionQuery (QueryFilterRequest) returns (DataNodeModeQueryReply) {}
  rpc DataNodeModeActionGetOne (QueryFilterRequest) returns (DataNodeModeReply) {}
  rpc DataNodeModeActionRemove (QueryFilterRequest) returns (RemoveReply) {}
}

message DataNodeModeCreateReply {
	DataNodeModeEntity data  = 1;
	IError error = 2;
}

message DataNodeModeReply {
	DataNodeModeEntity data = 1;
	IError error = 2;
}

message DataNodeModeQueryReply {
	repeated DataNodeModeEntity items = 1;
	int64 totalItems = 2;
	int64 itemsPerPage = 3;
	int64 startIndex = 4;
	IError error = 5;
}





 
message DataNodeModeEntity {
  optional string visibility = 1; // @tag(yaml:"visibility")
  optional string workspaceId = 2; // @tag(yaml:"workspaceId")
  optional string linkerId = 3; // @tag(yaml:"linkerId")
  optional string parentId = 4; // @tag(yaml:"parentId")
  string uniqueId = 5; // @tag(gorm:"primarykey;uniqueId;unique;not null;size:100;" yaml:"uniqueId")
  optional string userId = 6; // @tag(yaml:"userId")
  optional string name = 8; // @tag(  yaml:"name"  )

  int64 rank = 9; // @tag(gorm:"type:int;name:rank")
  int64 updated = 10; // @tag(gorm:"autoUpdateTime:nano")
  int64 created = 11; // @tag(gorm:"autoUpdateTime:nano")
  string createdFormatted = 12; // @tag(sql:"-")
  string updatedFormatted = 13; // @tag(sql:"-")
}












/**
* Add your custom services, and messages here.
* It can be your dto for example. 
* - Use Module.yml for entities, otherwise it won't be managed
* - Don't use this file for entities might be queried by web
**/
      




  

  

  
      
service DataNodeTypes {
  rpc DataNodeTypeActionCreate (DataNodeTypeEntity) returns (DataNodeTypeCreateReply) {}
  rpc DataNodeTypeActionUpdate (DataNodeTypeEntity) returns (DataNodeTypeCreateReply) {}

  rpc DataNodeTypeActionQuery (QueryFilterRequest) returns (DataNodeTypeQueryReply) {}
  rpc DataNodeTypeActionGetOne (QueryFilterRequest) returns (DataNodeTypeReply) {}
  rpc DataNodeTypeActionRemove (QueryFilterRequest) returns (RemoveReply) {}
}

message DataNodeTypeCreateReply {
	DataNodeTypeEntity data  = 1;
	IError error = 2;
}

message DataNodeTypeReply {
	DataNodeTypeEntity data = 1;
	IError error = 2;
}

message DataNodeTypeQueryReply {
	repeated DataNodeTypeEntity items = 1;
	int64 totalItems = 2;
	int64 itemsPerPage = 3;
	int64 startIndex = 4;
	IError error = 5;
}





 
message DataNodeTypeEntity {
  optional string visibility = 1; // @tag(yaml:"visibility")
  optional string workspaceId = 2; // @tag(yaml:"workspaceId")
  optional string linkerId = 3; // @tag(yaml:"linkerId")
  optional string parentId = 4; // @tag(yaml:"parentId")
  string uniqueId = 5; // @tag(gorm:"primarykey;uniqueId;unique;not null;size:100;" yaml:"uniqueId")
  optional string userId = 6; // @tag(yaml:"userId")
  optional string name = 8; // @tag(  yaml:"name"  )

  int64 rank = 9; // @tag(gorm:"type:int;name:rank")
  int64 updated = 10; // @tag(gorm:"autoUpdateTime:nano")
  int64 created = 11; // @tag(gorm:"autoUpdateTime:nano")
  string createdFormatted = 12; // @tag(sql:"-")
  string updatedFormatted = 13; // @tag(sql:"-")
}












/**
* Add your custom services, and messages here.
* It can be your dto for example. 
* - Use Module.yml for entities, otherwise it won't be managed
* - Don't use this file for entities might be queried by web
**/
      




  

  

  
      
service Devices {
  rpc DeviceActionCreate (DeviceEntity) returns (DeviceCreateReply) {}
  rpc DeviceActionUpdate (DeviceEntity) returns (DeviceCreateReply) {}

  rpc DeviceActionQuery (QueryFilterRequest) returns (DeviceQueryReply) {}
  rpc DeviceActionGetOne (QueryFilterRequest) returns (DeviceReply) {}
  rpc DeviceActionRemove (QueryFilterRequest) returns (RemoveReply) {}
}

message DeviceCreateReply {
	DeviceEntity data  = 1;
	IError error = 2;
}

message DeviceReply {
	DeviceEntity data = 1;
	IError error = 2;
}

message DeviceQueryReply {
	repeated DeviceEntity items = 1;
	int64 totalItems = 2;
	int64 itemsPerPage = 3;
	int64 startIndex = 4;
	IError error = 5;
}

;

;





 
message DeviceEntity {
  optional string visibility = 1; // @tag(yaml:"visibility")
  optional string workspaceId = 2; // @tag(yaml:"workspaceId")
  optional string linkerId = 3; // @tag(yaml:"linkerId")
  optional string parentId = 4; // @tag(yaml:"parentId")
  string uniqueId = 5; // @tag(gorm:"primarykey;uniqueId;unique;not null;size:100;" yaml:"uniqueId")
  optional string userId = 6; // @tag(yaml:"userId")
  repeated DeviceEntityPolyglot translations = 7; // @tag(gorm:"foreignKey:LinkerId;references:UniqueId" json:"translations")
  optional string name = 9; // @tag(translate:"true"  yaml:"name"  )

  optional string model = 10; // @tag(  yaml:"model"  )

  optional string ip = 11; // @tag( validate:"ip" yaml:"ip"  )

  optional string wifiUser = 12; // @tag(  yaml:"wifiUser"  )

  optional string wifiPassword = 13; // @tag(  yaml:"wifiPassword"  )

  optional string securityType = 14; // @tag(  yaml:"securityType"  )

  /* One 2 one to external entity */
  optional string typeId  = 16; // @tag(yaml:"typeId" )
  DeviceTypeEntity type = 17; // @tag(gorm:"foreignKey:TypeId;references:UniqueId" json:"type" yaml:"type" fbtype:"one")

  /* This is an object, another entity needs to be created for */
  DeviceDeviceModbusConfigEntity deviceModbusConfig = 18; // @tag(gorm:"foreignKey:LinkerId;references:UniqueId" yaml:"deviceModbusConfig" fbtype:"object")

  int64 rank = 19; // @tag(gorm:"type:int;name:rank")
  int64 updated = 20; // @tag(gorm:"autoUpdateTime:nano")
  int64 created = 21; // @tag(gorm:"autoUpdateTime:nano")
  string createdFormatted = 22; // @tag(sql:"-")
  string updatedFormatted = 23; // @tag(sql:"-")
  repeated DeviceEntity children = 24; // @tag(gorm:"-" sql:"-")
}

/* Because it has translation field, we need a translation table for this */
message DeviceEntityPolyglot {
  string linkerId = 1; // @tag(gorm:"uniqueId;not null;size:100;" json:"linkerId" yaml:"linkerId")
  string languageId = 2; // @tag(gorm:"uniqueId;not null;size:100;" json:"languageId" yaml:"languageId")

  string name = 3; // @tag(yaml:"name" json:"name");

}










  

 
message DeviceDeviceModbusConfigEntity {
  optional string visibility = 1; // @tag(yaml:"visibility")
  optional string workspaceId = 2; // @tag(yaml:"workspaceId")
  optional string linkerId = 3; // @tag(yaml:"linkerId")
  optional string parentId = 4; // @tag(yaml:"parentId")
  string uniqueId = 5; // @tag(gorm:"primarykey;uniqueId;unique;not null;size:100;" yaml:"uniqueId")
  optional string userId = 6; // @tag(yaml:"userId")
  /* One 2 one to external entity */
  optional string modeId  = 9; // @tag(yaml:"modeId" )
  ModbusTransmissionModeEntity mode = 10; // @tag(gorm:"foreignKey:ModeId;references:UniqueId" json:"mode" yaml:"mode" fbtype:"one")

  optional int64 baudRate = 11; // @tag(  yaml:"baudRate"  )

  optional int64 dataBits = 12; // @tag(  yaml:"dataBits"  )

  optional int64 parity = 13; // @tag(  yaml:"parity"  )

  optional int64 stopBit = 14; // @tag(  yaml:"stopBit"  )

  optional int64 timeout = 15; // @tag(  yaml:"timeout"  )

  int64 rank = 16; // @tag(gorm:"type:int;name:rank")
  int64 updated = 17; // @tag(gorm:"autoUpdateTime:nano")
  int64 created = 18; // @tag(gorm:"autoUpdateTime:nano")
  string createdFormatted = 19; // @tag(sql:"-")
  string updatedFormatted = 20; // @tag(sql:"-")
}



















/**
* Add your custom services, and messages here.
* It can be your dto for example. 
* - Use Module.yml for entities, otherwise it won't be managed
* - Don't use this file for entities might be queried by web
**/
      




  

  

  
      
service DeviceTypes {
  rpc DeviceTypeActionCreate (DeviceTypeEntity) returns (DeviceTypeCreateReply) {}
  rpc DeviceTypeActionUpdate (DeviceTypeEntity) returns (DeviceTypeCreateReply) {}

  rpc DeviceTypeActionQuery (QueryFilterRequest) returns (DeviceTypeQueryReply) {}
  rpc DeviceTypeActionGetOne (QueryFilterRequest) returns (DeviceTypeReply) {}
  rpc DeviceTypeActionRemove (QueryFilterRequest) returns (RemoveReply) {}
}

message DeviceTypeCreateReply {
	DeviceTypeEntity data  = 1;
	IError error = 2;
}

message DeviceTypeReply {
	DeviceTypeEntity data = 1;
	IError error = 2;
}

message DeviceTypeQueryReply {
	repeated DeviceTypeEntity items = 1;
	int64 totalItems = 2;
	int64 itemsPerPage = 3;
	int64 startIndex = 4;
	IError error = 5;
}





 
message DeviceTypeEntity {
  optional string visibility = 1; // @tag(yaml:"visibility")
  optional string workspaceId = 2; // @tag(yaml:"workspaceId")
  optional string linkerId = 3; // @tag(yaml:"linkerId")
  optional string parentId = 4; // @tag(yaml:"parentId")
  string uniqueId = 5; // @tag(gorm:"primarykey;uniqueId;unique;not null;size:100;" yaml:"uniqueId")
  optional string userId = 6; // @tag(yaml:"userId")
  repeated DeviceTypeEntityPolyglot translations = 7; // @tag(gorm:"foreignKey:LinkerId;references:UniqueId" json:"translations")
  optional string name = 9; // @tag(translate:"true"  yaml:"name"  )

  int64 rank = 10; // @tag(gorm:"type:int;name:rank")
  int64 updated = 11; // @tag(gorm:"autoUpdateTime:nano")
  int64 created = 12; // @tag(gorm:"autoUpdateTime:nano")
  string createdFormatted = 13; // @tag(sql:"-")
  string updatedFormatted = 14; // @tag(sql:"-")
}

/* Because it has translation field, we need a translation table for this */
message DeviceTypeEntityPolyglot {
  string linkerId = 1; // @tag(gorm:"uniqueId;not null;size:100;" json:"linkerId" yaml:"linkerId")
  string languageId = 2; // @tag(gorm:"uniqueId;not null;size:100;" json:"languageId" yaml:"languageId")

  string name = 3; // @tag(yaml:"name" json:"name");

}












/**
* Add your custom services, and messages here.
* It can be your dto for example. 
* - Use Module.yml for entities, otherwise it won't be managed
* - Don't use this file for entities might be queried by web
**/
      




  

  

  
      
service Gpios {
  rpc GpioActionCreate (GpioEntity) returns (GpioCreateReply) {}
  rpc GpioActionUpdate (GpioEntity) returns (GpioCreateReply) {}

  rpc GpioActionQuery (QueryFilterRequest) returns (GpioQueryReply) {}
  rpc GpioActionGetOne (QueryFilterRequest) returns (GpioReply) {}
  rpc GpioActionRemove (QueryFilterRequest) returns (RemoveReply) {}
}

message GpioCreateReply {
	GpioEntity data  = 1;
	IError error = 2;
}

message GpioReply {
	GpioEntity data = 1;
	IError error = 2;
}

message GpioQueryReply {
	repeated GpioEntity items = 1;
	int64 totalItems = 2;
	int64 itemsPerPage = 3;
	int64 startIndex = 4;
	IError error = 5;
}

;





 
message GpioEntity {
  optional string visibility = 1; // @tag(yaml:"visibility")
  optional string workspaceId = 2; // @tag(yaml:"workspaceId")
  optional string linkerId = 3; // @tag(yaml:"linkerId")
  optional string parentId = 4; // @tag(yaml:"parentId")
  string uniqueId = 5; // @tag(gorm:"primarykey;uniqueId;unique;not null;size:100;" yaml:"uniqueId")
  optional string userId = 6; // @tag(yaml:"userId")
  optional string name = 8; // @tag(  yaml:"name"  )

  optional int64 index = 9; // @tag(  yaml:"index"  )

  optional string analogFunction = 10; // @tag(  yaml:"analogFunction"  )

  optional string rtcGpio = 11; // @tag(  yaml:"rtcGpio"  )

  optional string comments = 12; // @tag(  yaml:"comments"  )

  /* One 2 one to external entity */
  optional string modeId  = 14; // @tag(yaml:"modeId" )
  GpioModeEntity mode = 15; // @tag(gorm:"foreignKey:ModeId;references:UniqueId" json:"mode" yaml:"mode" fbtype:"one")

  int64 rank = 16; // @tag(gorm:"type:int;name:rank")
  int64 updated = 17; // @tag(gorm:"autoUpdateTime:nano")
  int64 created = 18; // @tag(gorm:"autoUpdateTime:nano")
  string createdFormatted = 19; // @tag(sql:"-")
  string updatedFormatted = 20; // @tag(sql:"-")
}

















/**
* Add your custom services, and messages here.
* It can be your dto for example. 
* - Use Module.yml for entities, otherwise it won't be managed
* - Don't use this file for entities might be queried by web
**/
      




  

  

  
      
service GpioModes {
  rpc GpioModeActionCreate (GpioModeEntity) returns (GpioModeCreateReply) {}
  rpc GpioModeActionUpdate (GpioModeEntity) returns (GpioModeCreateReply) {}

  rpc GpioModeActionQuery (QueryFilterRequest) returns (GpioModeQueryReply) {}
  rpc GpioModeActionGetOne (QueryFilterRequest) returns (GpioModeReply) {}
  rpc GpioModeActionRemove (QueryFilterRequest) returns (RemoveReply) {}
}

message GpioModeCreateReply {
	GpioModeEntity data  = 1;
	IError error = 2;
}

message GpioModeReply {
	GpioModeEntity data = 1;
	IError error = 2;
}

message GpioModeQueryReply {
	repeated GpioModeEntity items = 1;
	int64 totalItems = 2;
	int64 itemsPerPage = 3;
	int64 startIndex = 4;
	IError error = 5;
}





 
message GpioModeEntity {
  optional string visibility = 1; // @tag(yaml:"visibility")
  optional string workspaceId = 2; // @tag(yaml:"workspaceId")
  optional string linkerId = 3; // @tag(yaml:"linkerId")
  optional string parentId = 4; // @tag(yaml:"parentId")
  string uniqueId = 5; // @tag(gorm:"primarykey;uniqueId;unique;not null;size:100;" yaml:"uniqueId")
  optional string userId = 6; // @tag(yaml:"userId")
  repeated GpioModeEntityPolyglot translations = 7; // @tag(gorm:"foreignKey:LinkerId;references:UniqueId" json:"translations")
  optional string key = 9; // @tag(  yaml:"key"  )

  optional int64 index = 10; // @tag(  yaml:"index"  )

  optional string description = 11; // @tag(translate:"true"  yaml:"description"  )

  int64 rank = 12; // @tag(gorm:"type:int;name:rank")
  int64 updated = 13; // @tag(gorm:"autoUpdateTime:nano")
  int64 created = 14; // @tag(gorm:"autoUpdateTime:nano")
  string createdFormatted = 15; // @tag(sql:"-")
  string updatedFormatted = 16; // @tag(sql:"-")
}

/* Because it has translation field, we need a translation table for this */
message GpioModeEntityPolyglot {
  string linkerId = 1; // @tag(gorm:"uniqueId;not null;size:100;" json:"linkerId" yaml:"linkerId")
  string languageId = 2; // @tag(gorm:"uniqueId;not null;size:100;" json:"languageId" yaml:"languageId")

  string description = 3; // @tag(yaml:"description" json:"description");

}














/**
* Add your custom services, and messages here.
* It can be your dto for example. 
* - Use Module.yml for entities, otherwise it won't be managed
* - Don't use this file for entities might be queried by web
**/
      




  

  

  
      
service GpioStates {
  rpc GpioStateActionCreate (GpioStateEntity) returns (GpioStateCreateReply) {}
  rpc GpioStateActionUpdate (GpioStateEntity) returns (GpioStateCreateReply) {}

  rpc GpioStateActionQuery (QueryFilterRequest) returns (GpioStateQueryReply) {}
  rpc GpioStateActionGetOne (QueryFilterRequest) returns (GpioStateReply) {}
  rpc GpioStateActionRemove (QueryFilterRequest) returns (RemoveReply) {}
}

message GpioStateCreateReply {
	GpioStateEntity data  = 1;
	IError error = 2;
}

message GpioStateReply {
	GpioStateEntity data = 1;
	IError error = 2;
}

message GpioStateQueryReply {
	repeated GpioStateEntity items = 1;
	int64 totalItems = 2;
	int64 itemsPerPage = 3;
	int64 startIndex = 4;
	IError error = 5;
}

;

;





 
message GpioStateEntity {
  optional string visibility = 1; // @tag(yaml:"visibility")
  optional string workspaceId = 2; // @tag(yaml:"workspaceId")
  optional string linkerId = 3; // @tag(yaml:"linkerId")
  optional string parentId = 4; // @tag(yaml:"parentId")
  string uniqueId = 5; // @tag(gorm:"primarykey;uniqueId;unique;not null;size:100;" yaml:"uniqueId")
  optional string userId = 6; // @tag(yaml:"userId")
  /* One 2 one to external entity */
  optional string gpioModeId  = 9; // @tag(yaml:"gpioModeId" )
  GpioModeEntity gpioMode = 10; // @tag(gorm:"foreignKey:GpioModeId;references:UniqueId" json:"gpioMode" yaml:"gpioMode" fbtype:"one")

  optional int64 gpioIndexSnapshot = 11; // @tag(  yaml:"gpioIndexSnapshot"  )

  optional int64 gpioModeSnapshot = 12; // @tag(  yaml:"gpioModeSnapshot"  )

  optional int64 gpioValueSnapshot = 13; // @tag(  yaml:"gpioValueSnapshot"  )

  /* One 2 one to external entity */
  optional string gpioId  = 15; // @tag(yaml:"gpioId" )
  GpioEntity gpio = 16; // @tag(gorm:"foreignKey:GpioId;references:UniqueId" json:"gpio" yaml:"gpio" fbtype:"one")

  int64 rank = 17; // @tag(gorm:"type:int;name:rank")
  int64 updated = 18; // @tag(gorm:"autoUpdateTime:nano")
  int64 created = 19; // @tag(gorm:"autoUpdateTime:nano")
  string createdFormatted = 20; // @tag(sql:"-")
  string updatedFormatted = 21; // @tag(sql:"-")
}
















/**
* Add your custom services, and messages here.
* It can be your dto for example. 
* - Use Module.yml for entities, otherwise it won't be managed
* - Don't use this file for entities might be queried by web
**/
      









    




 
message IoWriterDto {
  optional string visibility = 1; // @tag(yaml:"visibility")
  optional string workspaceId = 2; // @tag(yaml:"workspaceId")
  optional string linkerId = 3; // @tag(yaml:"linkerId")
  optional string parentId = 4; // @tag(yaml:"parentId")
  string uniqueId = 5; // @tag(gorm:"primarykey;uniqueId;unique;not null;size:100;" yaml:"uniqueId")
  optional string userId = 6; // @tag(yaml:"userId")
  optional string content = 8; // @tag( validate:"required" yaml:"content"  )

  optional string type = 9; // @tag( validate:"required" yaml:"type"  )

  optional string host = 10; // @tag( validate:"required" yaml:"host"  )

  optional string path = 11; // @tag(  yaml:"path"  )

  int64 rank = 12; // @tag(gorm:"type:int;name:rank")
  int64 updated = 13; // @tag(gorm:"autoUpdateTime:nano")
  int64 created = 14; // @tag(gorm:"autoUpdateTime:nano")
  string createdFormatted = 15; // @tag(sql:"-")
  string updatedFormatted = 16; // @tag(sql:"-")
}












  

  

  
      
service MemoryStats {
  rpc MemoryStatActionCreate (MemoryStatEntity) returns (MemoryStatCreateReply) {}
  rpc MemoryStatActionUpdate (MemoryStatEntity) returns (MemoryStatCreateReply) {}

  rpc MemoryStatActionQuery (QueryFilterRequest) returns (MemoryStatQueryReply) {}
  rpc MemoryStatActionGetOne (QueryFilterRequest) returns (MemoryStatReply) {}
  rpc MemoryStatActionRemove (QueryFilterRequest) returns (RemoveReply) {}
}

message MemoryStatCreateReply {
	MemoryStatEntity data  = 1;
	IError error = 2;
}

message MemoryStatReply {
	MemoryStatEntity data = 1;
	IError error = 2;
}

message MemoryStatQueryReply {
	repeated MemoryStatEntity items = 1;
	int64 totalItems = 2;
	int64 itemsPerPage = 3;
	int64 startIndex = 4;
	IError error = 5;
}





 
message MemoryStatEntity {
  optional string visibility = 1; // @tag(yaml:"visibility")
  optional string workspaceId = 2; // @tag(yaml:"workspaceId")
  optional string linkerId = 3; // @tag(yaml:"linkerId")
  optional string parentId = 4; // @tag(yaml:"parentId")
  string uniqueId = 5; // @tag(gorm:"primarykey;uniqueId;unique;not null;size:100;" yaml:"uniqueId")
  optional string userId = 6; // @tag(yaml:"userId")
  optional int64 heapSize = 8; // @tag(  yaml:"heapSize"  )

  int64 rank = 9; // @tag(gorm:"type:int;name:rank")
  int64 updated = 10; // @tag(gorm:"autoUpdateTime:nano")
  int64 created = 11; // @tag(gorm:"autoUpdateTime:nano")
  string createdFormatted = 12; // @tag(sql:"-")
  string updatedFormatted = 13; // @tag(sql:"-")
}












/**
* Add your custom services, and messages here.
* It can be your dto for example. 
* - Use Module.yml for entities, otherwise it won't be managed
* - Don't use this file for entities might be queried by web
**/
      




  

  

  
      
service ModbusConnectionTypes {
  rpc ModbusConnectionTypeActionCreate (ModbusConnectionTypeEntity) returns (ModbusConnectionTypeCreateReply) {}
  rpc ModbusConnectionTypeActionUpdate (ModbusConnectionTypeEntity) returns (ModbusConnectionTypeCreateReply) {}

  rpc ModbusConnectionTypeActionQuery (QueryFilterRequest) returns (ModbusConnectionTypeQueryReply) {}
  rpc ModbusConnectionTypeActionGetOne (QueryFilterRequest) returns (ModbusConnectionTypeReply) {}
  rpc ModbusConnectionTypeActionRemove (QueryFilterRequest) returns (RemoveReply) {}
}

message ModbusConnectionTypeCreateReply {
	ModbusConnectionTypeEntity data  = 1;
	IError error = 2;
}

message ModbusConnectionTypeReply {
	ModbusConnectionTypeEntity data = 1;
	IError error = 2;
}

message ModbusConnectionTypeQueryReply {
	repeated ModbusConnectionTypeEntity items = 1;
	int64 totalItems = 2;
	int64 itemsPerPage = 3;
	int64 startIndex = 4;
	IError error = 5;
}





 
message ModbusConnectionTypeEntity {
  optional string visibility = 1; // @tag(yaml:"visibility")
  optional string workspaceId = 2; // @tag(yaml:"workspaceId")
  optional string linkerId = 3; // @tag(yaml:"linkerId")
  optional string parentId = 4; // @tag(yaml:"parentId")
  string uniqueId = 5; // @tag(gorm:"primarykey;uniqueId;unique;not null;size:100;" yaml:"uniqueId")
  optional string userId = 6; // @tag(yaml:"userId")
  repeated ModbusConnectionTypeEntityPolyglot translations = 7; // @tag(gorm:"foreignKey:LinkerId;references:UniqueId" json:"translations")
  optional string name = 9; // @tag(translate:"true"  yaml:"name"  )

  int64 rank = 10; // @tag(gorm:"type:int;name:rank")
  int64 updated = 11; // @tag(gorm:"autoUpdateTime:nano")
  int64 created = 12; // @tag(gorm:"autoUpdateTime:nano")
  string createdFormatted = 13; // @tag(sql:"-")
  string updatedFormatted = 14; // @tag(sql:"-")
}

/* Because it has translation field, we need a translation table for this */
message ModbusConnectionTypeEntityPolyglot {
  string linkerId = 1; // @tag(gorm:"uniqueId;not null;size:100;" json:"linkerId" yaml:"linkerId")
  string languageId = 2; // @tag(gorm:"uniqueId;not null;size:100;" json:"languageId" yaml:"languageId")

  string name = 3; // @tag(yaml:"name" json:"name");

}












/**
* Add your custom services, and messages here.
* It can be your dto for example. 
* - Use Module.yml for entities, otherwise it won't be managed
* - Don't use this file for entities might be queried by web
**/
      




  

  

  
      
service ModbusFunctionCodes {
  rpc ModbusFunctionCodeActionCreate (ModbusFunctionCodeEntity) returns (ModbusFunctionCodeCreateReply) {}
  rpc ModbusFunctionCodeActionUpdate (ModbusFunctionCodeEntity) returns (ModbusFunctionCodeCreateReply) {}

  rpc ModbusFunctionCodeActionQuery (QueryFilterRequest) returns (ModbusFunctionCodeQueryReply) {}
  rpc ModbusFunctionCodeActionGetOne (QueryFilterRequest) returns (ModbusFunctionCodeReply) {}
  rpc ModbusFunctionCodeActionRemove (QueryFilterRequest) returns (RemoveReply) {}
}

message ModbusFunctionCodeCreateReply {
	ModbusFunctionCodeEntity data  = 1;
	IError error = 2;
}

message ModbusFunctionCodeReply {
	ModbusFunctionCodeEntity data = 1;
	IError error = 2;
}

message ModbusFunctionCodeQueryReply {
	repeated ModbusFunctionCodeEntity items = 1;
	int64 totalItems = 2;
	int64 itemsPerPage = 3;
	int64 startIndex = 4;
	IError error = 5;
}





 
message ModbusFunctionCodeEntity {
  optional string visibility = 1; // @tag(yaml:"visibility")
  optional string workspaceId = 2; // @tag(yaml:"workspaceId")
  optional string linkerId = 3; // @tag(yaml:"linkerId")
  optional string parentId = 4; // @tag(yaml:"parentId")
  string uniqueId = 5; // @tag(gorm:"primarykey;uniqueId;unique;not null;size:100;" yaml:"uniqueId")
  optional string userId = 6; // @tag(yaml:"userId")
  repeated ModbusFunctionCodeEntityPolyglot translations = 7; // @tag(gorm:"foreignKey:LinkerId;references:UniqueId" json:"translations")
  optional string name = 9; // @tag(translate:"true"  yaml:"name"  )

  optional int64 code = 10; // @tag(  yaml:"code"  )

  int64 rank = 11; // @tag(gorm:"type:int;name:rank")
  int64 updated = 12; // @tag(gorm:"autoUpdateTime:nano")
  int64 created = 13; // @tag(gorm:"autoUpdateTime:nano")
  string createdFormatted = 14; // @tag(sql:"-")
  string updatedFormatted = 15; // @tag(sql:"-")
}

/* Because it has translation field, we need a translation table for this */
message ModbusFunctionCodeEntityPolyglot {
  string linkerId = 1; // @tag(gorm:"uniqueId;not null;size:100;" json:"linkerId" yaml:"linkerId")
  string languageId = 2; // @tag(gorm:"uniqueId;not null;size:100;" json:"languageId" yaml:"languageId")

  string name = 3; // @tag(yaml:"name" json:"name");

}













/**
* Add your custom services, and messages here.
* It can be your dto for example. 
* - Use Module.yml for entities, otherwise it won't be managed
* - Don't use this file for entities might be queried by web
**/
      




  

  

  
      
service ModbusTasks {
  rpc ModbusTaskActionCreate (ModbusTaskEntity) returns (ModbusTaskCreateReply) {}
  rpc ModbusTaskActionUpdate (ModbusTaskEntity) returns (ModbusTaskCreateReply) {}

  rpc ModbusTaskActionQuery (QueryFilterRequest) returns (ModbusTaskQueryReply) {}
  rpc ModbusTaskActionGetOne (QueryFilterRequest) returns (ModbusTaskReply) {}
  rpc ModbusTaskActionRemove (QueryFilterRequest) returns (RemoveReply) {}
}

message ModbusTaskCreateReply {
	ModbusTaskEntity data  = 1;
	IError error = 2;
}

message ModbusTaskReply {
	ModbusTaskEntity data = 1;
	IError error = 2;
}

message ModbusTaskQueryReply {
	repeated ModbusTaskEntity items = 1;
	int64 totalItems = 2;
	int64 itemsPerPage = 3;
	int64 startIndex = 4;
	IError error = 5;
}

;

;

;

;





 
message ModbusTaskEntity {
  optional string visibility = 1; // @tag(yaml:"visibility")
  optional string workspaceId = 2; // @tag(yaml:"workspaceId")
  optional string linkerId = 3; // @tag(yaml:"linkerId")
  optional string parentId = 4; // @tag(yaml:"parentId")
  string uniqueId = 5; // @tag(gorm:"primarykey;uniqueId;unique;not null;size:100;" yaml:"uniqueId")
  optional string userId = 6; // @tag(yaml:"userId")
  optional string name = 8; // @tag(  yaml:"name"  )

  optional int64 modbusId = 9; // @tag(  yaml:"modbusId"  )

  /* One 2 one to external entity */
  optional string deviceId  = 11; // @tag(yaml:"deviceId" )
  DeviceEntity device = 12; // @tag(gorm:"foreignKey:DeviceId;references:UniqueId" json:"device" yaml:"device" fbtype:"one")

  /* One 2 one to external entity */
  optional string connectionTypeId  = 14; // @tag(yaml:"connectionTypeId" )
  ModbusConnectionTypeEntity connectionType = 15; // @tag(gorm:"foreignKey:ConnectionTypeId;references:UniqueId" json:"connectionType" yaml:"connectionType" fbtype:"one")

  /* One 2 one to external entity */
  optional string functionCodeId  = 17; // @tag(yaml:"functionCodeId" )
  ModbusFunctionCodeEntity functionCode = 18; // @tag(gorm:"foreignKey:FunctionCodeId;references:UniqueId" json:"functionCode" yaml:"functionCode" fbtype:"one")

  optional int64 register = 19; // @tag(  yaml:"register"  )

  optional int64 writeInterval = 20; // @tag(  yaml:"writeInterval"  )

  optional int64 readInterval = 21; // @tag(  yaml:"readInterval"  )

  optional int64 range = 22; // @tag(  yaml:"range"  )

  optional int64 length = 23; // @tag(  yaml:"length"  )

  /* One 2 one to external entity */
  optional string variableTypeId  = 25; // @tag(yaml:"variableTypeId" )
  ModbusVariableTypeEntity variableType = 26; // @tag(gorm:"foreignKey:VariableTypeId;references:UniqueId" json:"variableType" yaml:"variableType" fbtype:"one")

  int64 rank = 27; // @tag(gorm:"type:int;name:rank")
  int64 updated = 28; // @tag(gorm:"autoUpdateTime:nano")
  int64 created = 29; // @tag(gorm:"autoUpdateTime:nano")
  string createdFormatted = 30; // @tag(sql:"-")
  string updatedFormatted = 31; // @tag(sql:"-")
}






















/**
* Add your custom services, and messages here.
* It can be your dto for example. 
* - Use Module.yml for entities, otherwise it won't be managed
* - Don't use this file for entities might be queried by web
**/
      




  

  

  
      
service ModbusTransmissionModes {
  rpc ModbusTransmissionModeActionCreate (ModbusTransmissionModeEntity) returns (ModbusTransmissionModeCreateReply) {}
  rpc ModbusTransmissionModeActionUpdate (ModbusTransmissionModeEntity) returns (ModbusTransmissionModeCreateReply) {}

  rpc ModbusTransmissionModeActionQuery (QueryFilterRequest) returns (ModbusTransmissionModeQueryReply) {}
  rpc ModbusTransmissionModeActionGetOne (QueryFilterRequest) returns (ModbusTransmissionModeReply) {}
  rpc ModbusTransmissionModeActionRemove (QueryFilterRequest) returns (RemoveReply) {}
}

message ModbusTransmissionModeCreateReply {
	ModbusTransmissionModeEntity data  = 1;
	IError error = 2;
}

message ModbusTransmissionModeReply {
	ModbusTransmissionModeEntity data = 1;
	IError error = 2;
}

message ModbusTransmissionModeQueryReply {
	repeated ModbusTransmissionModeEntity items = 1;
	int64 totalItems = 2;
	int64 itemsPerPage = 3;
	int64 startIndex = 4;
	IError error = 5;
}





 
message ModbusTransmissionModeEntity {
  optional string visibility = 1; // @tag(yaml:"visibility")
  optional string workspaceId = 2; // @tag(yaml:"workspaceId")
  optional string linkerId = 3; // @tag(yaml:"linkerId")
  optional string parentId = 4; // @tag(yaml:"parentId")
  string uniqueId = 5; // @tag(gorm:"primarykey;uniqueId;unique;not null;size:100;" yaml:"uniqueId")
  optional string userId = 6; // @tag(yaml:"userId")
  repeated ModbusTransmissionModeEntityPolyglot translations = 7; // @tag(gorm:"foreignKey:LinkerId;references:UniqueId" json:"translations")
  optional string name = 9; // @tag(translate:"true"  yaml:"name"  )

  int64 rank = 10; // @tag(gorm:"type:int;name:rank")
  int64 updated = 11; // @tag(gorm:"autoUpdateTime:nano")
  int64 created = 12; // @tag(gorm:"autoUpdateTime:nano")
  string createdFormatted = 13; // @tag(sql:"-")
  string updatedFormatted = 14; // @tag(sql:"-")
}

/* Because it has translation field, we need a translation table for this */
message ModbusTransmissionModeEntityPolyglot {
  string linkerId = 1; // @tag(gorm:"uniqueId;not null;size:100;" json:"linkerId" yaml:"linkerId")
  string languageId = 2; // @tag(gorm:"uniqueId;not null;size:100;" json:"languageId" yaml:"languageId")

  string name = 3; // @tag(yaml:"name" json:"name");

}












/**
* Add your custom services, and messages here.
* It can be your dto for example. 
* - Use Module.yml for entities, otherwise it won't be managed
* - Don't use this file for entities might be queried by web
**/
      




  

  

  
      
service ModbusVariableTypes {
  rpc ModbusVariableTypeActionCreate (ModbusVariableTypeEntity) returns (ModbusVariableTypeCreateReply) {}
  rpc ModbusVariableTypeActionUpdate (ModbusVariableTypeEntity) returns (ModbusVariableTypeCreateReply) {}

  rpc ModbusVariableTypeActionQuery (QueryFilterRequest) returns (ModbusVariableTypeQueryReply) {}
  rpc ModbusVariableTypeActionGetOne (QueryFilterRequest) returns (ModbusVariableTypeReply) {}
  rpc ModbusVariableTypeActionRemove (QueryFilterRequest) returns (RemoveReply) {}
}

message ModbusVariableTypeCreateReply {
	ModbusVariableTypeEntity data  = 1;
	IError error = 2;
}

message ModbusVariableTypeReply {
	ModbusVariableTypeEntity data = 1;
	IError error = 2;
}

message ModbusVariableTypeQueryReply {
	repeated ModbusVariableTypeEntity items = 1;
	int64 totalItems = 2;
	int64 itemsPerPage = 3;
	int64 startIndex = 4;
	IError error = 5;
}





 
message ModbusVariableTypeEntity {
  optional string visibility = 1; // @tag(yaml:"visibility")
  optional string workspaceId = 2; // @tag(yaml:"workspaceId")
  optional string linkerId = 3; // @tag(yaml:"linkerId")
  optional string parentId = 4; // @tag(yaml:"parentId")
  string uniqueId = 5; // @tag(gorm:"primarykey;uniqueId;unique;not null;size:100;" yaml:"uniqueId")
  optional string userId = 6; // @tag(yaml:"userId")
  repeated ModbusVariableTypeEntityPolyglot translations = 7; // @tag(gorm:"foreignKey:LinkerId;references:UniqueId" json:"translations")
  optional string name = 9; // @tag(translate:"true"  yaml:"name"  )

  int64 rank = 10; // @tag(gorm:"type:int;name:rank")
  int64 updated = 11; // @tag(gorm:"autoUpdateTime:nano")
  int64 created = 12; // @tag(gorm:"autoUpdateTime:nano")
  string createdFormatted = 13; // @tag(sql:"-")
  string updatedFormatted = 14; // @tag(sql:"-")
}

/* Because it has translation field, we need a translation table for this */
message ModbusVariableTypeEntityPolyglot {
  string linkerId = 1; // @tag(gorm:"uniqueId;not null;size:100;" json:"linkerId" yaml:"linkerId")
  string languageId = 2; // @tag(gorm:"uniqueId;not null;size:100;" json:"languageId" yaml:"languageId")

  string name = 3; // @tag(yaml:"name" json:"name");

}












/**
* Add your custom services, and messages here.
* It can be your dto for example. 
* - Use Module.yml for entities, otherwise it won't be managed
* - Don't use this file for entities might be queried by web
**/
      









    




 
message MqttClientConnectDto {
  optional string visibility = 1; // @tag(yaml:"visibility")
  optional string workspaceId = 2; // @tag(yaml:"workspaceId")
  optional string linkerId = 3; // @tag(yaml:"linkerId")
  optional string parentId = 4; // @tag(yaml:"parentId")
  string uniqueId = 5; // @tag(gorm:"primarykey;uniqueId;unique;not null;size:100;" yaml:"uniqueId")
  optional string userId = 6; // @tag(yaml:"userId")
  optional bool connect = 8; // @tag(  yaml:"connect")

  int64 rank = 9; // @tag(gorm:"type:int;name:rank")
  int64 updated = 10; // @tag(gorm:"autoUpdateTime:nano")
  int64 created = 11; // @tag(gorm:"autoUpdateTime:nano")
  string createdFormatted = 12; // @tag(sql:"-")
  string updatedFormatted = 13; // @tag(sql:"-")
}














    




 
message MqttClientConnectionDto {
  optional string visibility = 1; // @tag(yaml:"visibility")
  optional string workspaceId = 2; // @tag(yaml:"workspaceId")
  optional string linkerId = 3; // @tag(yaml:"linkerId")
  optional string parentId = 4; // @tag(yaml:"parentId")
  string uniqueId = 5; // @tag(gorm:"primarykey;uniqueId;unique;not null;size:100;" yaml:"uniqueId")
  optional string userId = 6; // @tag(yaml:"userId")
  optional string name = 8; // @tag(  yaml:"name"  )

  optional bool isConnected = 9; // @tag(  yaml:"isConnected")

  int64 rank = 10; // @tag(gorm:"type:int;name:rank")
  int64 updated = 11; // @tag(gorm:"autoUpdateTime:nano")
  int64 created = 12; // @tag(gorm:"autoUpdateTime:nano")
  string createdFormatted = 13; // @tag(sql:"-")
  string updatedFormatted = 14; // @tag(sql:"-")
}















    
;





 
message MqttConfigDto {
  optional string visibility = 1; // @tag(yaml:"visibility")
  optional string workspaceId = 2; // @tag(yaml:"workspaceId")
  optional string linkerId = 3; // @tag(yaml:"linkerId")
  optional string parentId = 4; // @tag(yaml:"parentId")
  string uniqueId = 5; // @tag(gorm:"primarykey;uniqueId;unique;not null;size:100;" yaml:"uniqueId")
  optional string userId = 6; // @tag(yaml:"userId")
  optional bool ssl = 8; // @tag(  yaml:"ssl")

  optional bool autoReconnect = 9; // @tag(  yaml:"autoReconnect")

  optional bool cleanSession = 10; // @tag(  yaml:"cleanSession")

  optional bool lastWillRetain = 11; // @tag(  yaml:"lastWillRetain")

  optional int64 port = 12; // @tag(  yaml:"port"  )

  optional int64 keepAlive = 13; // @tag(  yaml:"keepAlive"  )

  optional int64 connectTimeout = 14; // @tag(  yaml:"connectTimeout"  )

  optional int64 lastWillQos = 15; // @tag(  yaml:"lastWillQos"  )

  optional string clientId = 16; // @tag(  yaml:"clientId"  )

  optional string name = 17; // @tag(  yaml:"name"  )

  optional string host = 18; // @tag(  yaml:"host"  )

  optional string username = 19; // @tag(  yaml:"username"  )

  optional string password = 20; // @tag(  yaml:"password"  )

  /* One 2 one to external entity */
  optional string mqttVersionId  = 22; // @tag(yaml:"mqttVersionId" )
  MqttVersionEntity mqttVersion = 23; // @tag(gorm:"foreignKey:MqttVersionId;references:UniqueId" json:"mqttVersion" yaml:"mqttVersion" fbtype:"one")

  optional string lastWillTopic = 24; // @tag(  yaml:"lastWillTopic"  )

  optional string lastWillPayload = 25; // @tag(  yaml:"lastWillPayload"  )

  int64 rank = 26; // @tag(gorm:"type:int;name:rank")
  int64 updated = 27; // @tag(gorm:"autoUpdateTime:nano")
  int64 created = 28; // @tag(gorm:"autoUpdateTime:nano")
  string createdFormatted = 29; // @tag(sql:"-")
  string updatedFormatted = 30; // @tag(sql:"-")
}
























  

  

  
      
service MqttVersions {
  rpc MqttVersionActionCreate (MqttVersionEntity) returns (MqttVersionCreateReply) {}
  rpc MqttVersionActionUpdate (MqttVersionEntity) returns (MqttVersionCreateReply) {}

  rpc MqttVersionActionQuery (QueryFilterRequest) returns (MqttVersionQueryReply) {}
  rpc MqttVersionActionGetOne (QueryFilterRequest) returns (MqttVersionReply) {}
  rpc MqttVersionActionRemove (QueryFilterRequest) returns (RemoveReply) {}
}

message MqttVersionCreateReply {
	MqttVersionEntity data  = 1;
	IError error = 2;
}

message MqttVersionReply {
	MqttVersionEntity data = 1;
	IError error = 2;
}

message MqttVersionQueryReply {
	repeated MqttVersionEntity items = 1;
	int64 totalItems = 2;
	int64 itemsPerPage = 3;
	int64 startIndex = 4;
	IError error = 5;
}





 
message MqttVersionEntity {
  optional string visibility = 1; // @tag(yaml:"visibility")
  optional string workspaceId = 2; // @tag(yaml:"workspaceId")
  optional string linkerId = 3; // @tag(yaml:"linkerId")
  optional string parentId = 4; // @tag(yaml:"parentId")
  string uniqueId = 5; // @tag(gorm:"primarykey;uniqueId;unique;not null;size:100;" yaml:"uniqueId")
  optional string userId = 6; // @tag(yaml:"userId")
  optional string version = 8; // @tag(  yaml:"version"  )

  int64 rank = 9; // @tag(gorm:"type:int;name:rank")
  int64 updated = 10; // @tag(gorm:"autoUpdateTime:nano")
  int64 created = 11; // @tag(gorm:"autoUpdateTime:nano")
  string createdFormatted = 12; // @tag(sql:"-")
  string updatedFormatted = 13; // @tag(sql:"-")
}












/**
* Add your custom services, and messages here.
* It can be your dto for example. 
* - Use Module.yml for entities, otherwise it won't be managed
* - Don't use this file for entities might be queried by web
**/
      




  

  

  
      
service NodeDatums {
  rpc NodeDatumActionCreate (NodeDatumEntity) returns (NodeDatumCreateReply) {}
  rpc NodeDatumActionUpdate (NodeDatumEntity) returns (NodeDatumCreateReply) {}

  rpc NodeDatumActionQuery (QueryFilterRequest) returns (NodeDatumQueryReply) {}
  rpc NodeDatumActionGetOne (QueryFilterRequest) returns (NodeDatumReply) {}
  rpc NodeDatumActionRemove (QueryFilterRequest) returns (RemoveReply) {}
}

message NodeDatumCreateReply {
	NodeDatumEntity data  = 1;
	IError error = 2;
}

message NodeDatumReply {
	NodeDatumEntity data = 1;
	IError error = 2;
}

message NodeDatumQueryReply {
	repeated NodeDatumEntity items = 1;
	int64 totalItems = 2;
	int64 itemsPerPage = 3;
	int64 startIndex = 4;
	IError error = 5;
}

;





 
message NodeDatumEntity {
  optional string visibility = 1; // @tag(yaml:"visibility")
  optional string workspaceId = 2; // @tag(yaml:"workspaceId")
  optional string linkerId = 3; // @tag(yaml:"linkerId")
  optional string parentId = 4; // @tag(yaml:"parentId")
  string uniqueId = 5; // @tag(gorm:"primarykey;uniqueId;unique;not null;size:100;" yaml:"uniqueId")
  optional string userId = 6; // @tag(yaml:"userId")
  /* One 2 one to external entity */
  optional string nodeId  = 9; // @tag(yaml:"nodeId" )
  DataNodeEntity node = 10; // @tag(gorm:"foreignKey:NodeId;references:UniqueId" json:"node" yaml:"node" fbtype:"one")

  optional double valueFloat64 = 11; // @tag(  yaml:"valueFloat64"  )

  optional int64 valueInt64 = 12; // @tag(  yaml:"valueInt64"  )

  optional string valueString = 13; // @tag(  yaml:"valueString"  )

  optional bool valueBoolean = 14; // @tag(  yaml:"valueBoolean")

  int64 ingestedAt = 16;
  string ingestedAtFormatted = 17;

  int64 rank = 18; // @tag(gorm:"type:int;name:rank")
  int64 updated = 19; // @tag(gorm:"autoUpdateTime:nano")
  int64 created = 20; // @tag(gorm:"autoUpdateTime:nano")
  string createdFormatted = 21; // @tag(sql:"-")
  string updatedFormatted = 22; // @tag(sql:"-")
}

















/**
* Add your custom services, and messages here.
* It can be your dto for example. 
* - Use Module.yml for entities, otherwise it won't be managed
* - Don't use this file for entities might be queried by web
**/
      




  

  

  
      
service NodeReaders {
  rpc NodeReaderActionCreate (NodeReaderEntity) returns (NodeReaderCreateReply) {}
  rpc NodeReaderActionUpdate (NodeReaderEntity) returns (NodeReaderCreateReply) {}

  rpc NodeReaderActionQuery (QueryFilterRequest) returns (NodeReaderQueryReply) {}
  rpc NodeReaderActionGetOne (QueryFilterRequest) returns (NodeReaderReply) {}
  rpc NodeReaderActionRemove (QueryFilterRequest) returns (RemoveReply) {}
}

message NodeReaderCreateReply {
	NodeReaderEntity data  = 1;
	IError error = 2;
}

message NodeReaderReply {
	NodeReaderEntity data = 1;
	IError error = 2;
}

message NodeReaderQueryReply {
	repeated NodeReaderEntity items = 1;
	int64 totalItems = 2;
	int64 itemsPerPage = 3;
	int64 startIndex = 4;
	IError error = 5;
}





 
message NodeReaderEntity {
  optional string visibility = 1; // @tag(yaml:"visibility")
  optional string workspaceId = 2; // @tag(yaml:"workspaceId")
  optional string linkerId = 3; // @tag(yaml:"linkerId")
  optional string parentId = 4; // @tag(yaml:"parentId")
  string uniqueId = 5; // @tag(gorm:"primarykey;uniqueId;unique;not null;size:100;" yaml:"uniqueId")
  optional string userId = 6; // @tag(yaml:"userId")
  optional string name = 8; // @tag(  yaml:"name"  )

  optional string nativeFn = 9; // @tag(  yaml:"nativeFn"  )

  int64 rank = 10; // @tag(gorm:"type:int;name:rank")
  int64 updated = 11; // @tag(gorm:"autoUpdateTime:nano")
  int64 created = 12; // @tag(gorm:"autoUpdateTime:nano")
  string createdFormatted = 13; // @tag(sql:"-")
  string updatedFormatted = 14; // @tag(sql:"-")
}













/**
* Add your custom services, and messages here.
* It can be your dto for example. 
* - Use Module.yml for entities, otherwise it won't be managed
* - Don't use this file for entities might be queried by web
**/
      




  

  

  
      
service NodeWriters {
  rpc NodeWriterActionCreate (NodeWriterEntity) returns (NodeWriterCreateReply) {}
  rpc NodeWriterActionUpdate (NodeWriterEntity) returns (NodeWriterCreateReply) {}

  rpc NodeWriterActionQuery (QueryFilterRequest) returns (NodeWriterQueryReply) {}
  rpc NodeWriterActionGetOne (QueryFilterRequest) returns (NodeWriterReply) {}
  rpc NodeWriterActionRemove (QueryFilterRequest) returns (RemoveReply) {}
}

message NodeWriterCreateReply {
	NodeWriterEntity data  = 1;
	IError error = 2;
}

message NodeWriterReply {
	NodeWriterEntity data = 1;
	IError error = 2;
}

message NodeWriterQueryReply {
	repeated NodeWriterEntity items = 1;
	int64 totalItems = 2;
	int64 itemsPerPage = 3;
	int64 startIndex = 4;
	IError error = 5;
}





 
message NodeWriterEntity {
  optional string visibility = 1; // @tag(yaml:"visibility")
  optional string workspaceId = 2; // @tag(yaml:"workspaceId")
  optional string linkerId = 3; // @tag(yaml:"linkerId")
  optional string parentId = 4; // @tag(yaml:"parentId")
  string uniqueId = 5; // @tag(gorm:"primarykey;uniqueId;unique;not null;size:100;" yaml:"uniqueId")
  optional string userId = 6; // @tag(yaml:"userId")
  optional string name = 8; // @tag(  yaml:"name"  )

  optional string nativeFn = 9; // @tag(  yaml:"nativeFn"  )

  int64 rank = 10; // @tag(gorm:"type:int;name:rank")
  int64 updated = 11; // @tag(gorm:"autoUpdateTime:nano")
  int64 created = 12; // @tag(gorm:"autoUpdateTime:nano")
  string createdFormatted = 13; // @tag(sql:"-")
  string updatedFormatted = 14; // @tag(sql:"-")
}













/**
* Add your custom services, and messages here.
* It can be your dto for example. 
* - Use Module.yml for entities, otherwise it won't be managed
* - Don't use this file for entities might be queried by web
**/
      









    




 
message OvioSetOutputDto {
  optional string visibility = 1; // @tag(yaml:"visibility")
  optional string workspaceId = 2; // @tag(yaml:"workspaceId")
  optional string linkerId = 3; // @tag(yaml:"linkerId")
  optional string parentId = 4; // @tag(yaml:"parentId")
  string uniqueId = 5; // @tag(gorm:"primarykey;uniqueId;unique;not null;size:100;" yaml:"uniqueId")
  optional string userId = 6; // @tag(yaml:"userId")
  optional string id = 8; // @tag( validate:"required" yaml:"id"  )

  optional string type = 9; // @tag(  yaml:"type"  )

  optional string cmdid = 10; // @tag(  yaml:"cmdid"  )

  /* This is an object, another entity needs to be created for */
  OvioSetOutputDataDto data = 11; // @tag(gorm:"foreignKey:LinkerId;references:UniqueId" yaml:"data" fbtype:"object")

  int64 rank = 12; // @tag(gorm:"type:int;name:rank")
  int64 updated = 13; // @tag(gorm:"autoUpdateTime:nano")
  int64 created = 14; // @tag(gorm:"autoUpdateTime:nano")
  string createdFormatted = 15; // @tag(sql:"-")
  string updatedFormatted = 16; // @tag(sql:"-")
}






  

 
message OvioSetOutputDataDto {
  optional string visibility = 1; // @tag(yaml:"visibility")
  optional string workspaceId = 2; // @tag(yaml:"workspaceId")
  optional string linkerId = 3; // @tag(yaml:"linkerId")
  optional string parentId = 4; // @tag(yaml:"parentId")
  string uniqueId = 5; // @tag(gorm:"primarykey;uniqueId;unique;not null;size:100;" yaml:"uniqueId")
  optional string userId = 6; // @tag(yaml:"userId")
  optional int64 o1 = 8; // @tag(  yaml:"o1"  )

  optional int64 o2 = 9; // @tag(  yaml:"o2"  )

  optional int64 o3 = 10; // @tag(  yaml:"o3"  )

  optional int64 o4 = 11; // @tag(  yaml:"o4"  )

  optional int64 o5 = 12; // @tag(  yaml:"o5"  )

  optional int64 o6 = 13; // @tag(  yaml:"o6"  )

  optional int64 o7 = 14; // @tag(  yaml:"o7"  )

  optional int64 o8 = 15; // @tag(  yaml:"o8"  )

  optional int64 i1 = 16; // @tag(  yaml:"i1"  )

  optional int64 i2 = 17; // @tag(  yaml:"i2"  )

  optional int64 i3 = 18; // @tag(  yaml:"i3"  )

  optional int64 i4 = 19; // @tag(  yaml:"i4"  )

  optional int64 i5 = 20; // @tag(  yaml:"i5"  )

  optional int64 i6 = 21; // @tag(  yaml:"i6"  )

  optional int64 i7 = 22; // @tag(  yaml:"i7"  )

  optional int64 i8 = 23; // @tag(  yaml:"i8"  )

  int64 rank = 24; // @tag(gorm:"type:int;name:rank")
  int64 updated = 25; // @tag(gorm:"autoUpdateTime:nano")
  int64 created = 26; // @tag(gorm:"autoUpdateTime:nano")
  string createdFormatted = 27; // @tag(sql:"-")
  string updatedFormatted = 28; // @tag(sql:"-")
}


























  

  

  
      
service PhysicalSections {
  rpc PhysicalSectionActionCreate (PhysicalSectionEntity) returns (PhysicalSectionCreateReply) {}
  rpc PhysicalSectionActionUpdate (PhysicalSectionEntity) returns (PhysicalSectionCreateReply) {}

  rpc PhysicalSectionActionQuery (QueryFilterRequest) returns (PhysicalSectionQueryReply) {}
  rpc PhysicalSectionActionGetOne (QueryFilterRequest) returns (PhysicalSectionReply) {}
  rpc PhysicalSectionActionRemove (QueryFilterRequest) returns (RemoveReply) {}
}

message PhysicalSectionCreateReply {
	PhysicalSectionEntity data  = 1;
	IError error = 2;
}

message PhysicalSectionReply {
	PhysicalSectionEntity data = 1;
	IError error = 2;
}

message PhysicalSectionQueryReply {
	repeated PhysicalSectionEntity items = 1;
	int64 totalItems = 2;
	int64 itemsPerPage = 3;
	int64 startIndex = 4;
	IError error = 5;
}





 
message PhysicalSectionEntity {
  optional string visibility = 1; // @tag(yaml:"visibility")
  optional string workspaceId = 2; // @tag(yaml:"workspaceId")
  optional string linkerId = 3; // @tag(yaml:"linkerId")
  optional string parentId = 4; // @tag(yaml:"parentId")
  string uniqueId = 5; // @tag(gorm:"primarykey;uniqueId;unique;not null;size:100;" yaml:"uniqueId")
  optional string userId = 6; // @tag(yaml:"userId")
  repeated PhysicalSectionEntityPolyglot translations = 7; // @tag(gorm:"foreignKey:LinkerId;references:UniqueId" json:"translations")
  optional string name = 9; // @tag(translate:"true"  yaml:"name"  )

  int64 rank = 10; // @tag(gorm:"type:int;name:rank")
  int64 updated = 11; // @tag(gorm:"autoUpdateTime:nano")
  int64 created = 12; // @tag(gorm:"autoUpdateTime:nano")
  string createdFormatted = 13; // @tag(sql:"-")
  string updatedFormatted = 14; // @tag(sql:"-")
}

/* Because it has translation field, we need a translation table for this */
message PhysicalSectionEntityPolyglot {
  string linkerId = 1; // @tag(gorm:"uniqueId;not null;size:100;" json:"linkerId" yaml:"linkerId")
  string languageId = 2; // @tag(gorm:"uniqueId;not null;size:100;" json:"languageId" yaml:"languageId")

  string name = 3; // @tag(yaml:"name" json:"name");

}












/**
* Add your custom services, and messages here.
* It can be your dto for example. 
* - Use Module.yml for entities, otherwise it won't be managed
* - Don't use this file for entities might be queried by web
**/
      




  

  

  
      
service Scenarios {
  rpc ScenarioActionCreate (ScenarioEntity) returns (ScenarioCreateReply) {}
  rpc ScenarioActionUpdate (ScenarioEntity) returns (ScenarioCreateReply) {}

  rpc ScenarioActionQuery (QueryFilterRequest) returns (ScenarioQueryReply) {}
  rpc ScenarioActionGetOne (QueryFilterRequest) returns (ScenarioReply) {}
  rpc ScenarioActionRemove (QueryFilterRequest) returns (RemoveReply) {}
}

message ScenarioCreateReply {
	ScenarioEntity data  = 1;
	IError error = 2;
}

message ScenarioReply {
	ScenarioEntity data = 1;
	IError error = 2;
}

message ScenarioQueryReply {
	repeated ScenarioEntity items = 1;
	int64 totalItems = 2;
	int64 itemsPerPage = 3;
	int64 startIndex = 4;
	IError error = 5;
}

;

;





 
message ScenarioEntity {
  optional string visibility = 1; // @tag(yaml:"visibility")
  optional string workspaceId = 2; // @tag(yaml:"workspaceId")
  optional string linkerId = 3; // @tag(yaml:"linkerId")
  optional string parentId = 4; // @tag(yaml:"parentId")
  string uniqueId = 5; // @tag(gorm:"primarykey;uniqueId;unique;not null;size:100;" yaml:"uniqueId")
  optional string userId = 6; // @tag(yaml:"userId")
  repeated ScenarioEntityPolyglot translations = 7; // @tag(gorm:"foreignKey:LinkerId;references:UniqueId" json:"translations")
  optional string name = 9; // @tag(translate:"true"  yaml:"name"  )

  /* This is an object, another entity needs to be created for */
  ScenarioScriptEntity script = 10; // @tag(gorm:"foreignKey:LinkerId;references:UniqueId" yaml:"script" fbtype:"object")

  /* This is an object, another entity needs to be created for */
  /*repeated ScenarioLammerSequenceEntity lammerSequences = 11; // @tag(gorm:"foreignKey:LinkerId;references:UniqueId" yaml:"lammerSequences")*/
  repeated ScenarioLammerSequenceEntity lammerSequences = 11; // @tag(gorm:"foreignKey:LinkerId;references:UniqueId" yaml:"lammerSequences" fbtype:"array")

  int64 rank = 12; // @tag(gorm:"type:int;name:rank")
  int64 updated = 13; // @tag(gorm:"autoUpdateTime:nano")
  int64 created = 14; // @tag(gorm:"autoUpdateTime:nano")
  string createdFormatted = 15; // @tag(sql:"-")
  string updatedFormatted = 16; // @tag(sql:"-")
}

/* Because it has translation field, we need a translation table for this */
message ScenarioEntityPolyglot {
  string linkerId = 1; // @tag(gorm:"uniqueId;not null;size:100;" json:"linkerId" yaml:"linkerId")
  string languageId = 2; // @tag(gorm:"uniqueId;not null;size:100;" json:"languageId" yaml:"languageId")

  string name = 3; // @tag(yaml:"name" json:"name");

}




  

 
message ScenarioScriptEntity {
  optional string visibility = 1; // @tag(yaml:"visibility")
  optional string workspaceId = 2; // @tag(yaml:"workspaceId")
  optional string linkerId = 3; // @tag(yaml:"linkerId")
  optional string parentId = 4; // @tag(yaml:"parentId")
  string uniqueId = 5; // @tag(gorm:"primarykey;uniqueId;unique;not null;size:100;" yaml:"uniqueId")
  optional string userId = 6; // @tag(yaml:"userId")
  optional string content = 8; // @tag(  yaml:"content"  )

  /* One 2 one to external entity */
  optional string scriptLanguageId  = 10; // @tag(yaml:"scriptLanguageId" )
  ScenarioLanguageEntity scriptLanguage = 11; // @tag(gorm:"foreignKey:ScriptLanguageId;references:UniqueId" json:"scriptLanguage" yaml:"scriptLanguage" fbtype:"one")

  int64 rank = 12; // @tag(gorm:"type:int;name:rank")
  int64 updated = 13; // @tag(gorm:"autoUpdateTime:nano")
  int64 created = 14; // @tag(gorm:"autoUpdateTime:nano")
  string createdFormatted = 15; // @tag(sql:"-")
  string updatedFormatted = 16; // @tag(sql:"-")
}







  

 
message ScenarioLammerSequenceEntity {
  optional string visibility = 1; // @tag(yaml:"visibility")
  optional string workspaceId = 2; // @tag(yaml:"workspaceId")
  optional string linkerId = 3; // @tag(yaml:"linkerId")
  optional string parentId = 4; // @tag(yaml:"parentId")
  string uniqueId = 5; // @tag(gorm:"primarykey;uniqueId;unique;not null;size:100;" yaml:"uniqueId")
  optional string userId = 6; // @tag(yaml:"userId")
  /* One 2 one to external entity */
  optional string operationTypeId  = 9; // @tag(yaml:"operationTypeId" )
  ScenarioOperationTypeEntity operationType = 10; // @tag(gorm:"foreignKey:OperationTypeId;references:UniqueId" json:"operationType" yaml:"operationType" fbtype:"one")

  int64 rank = 11; // @tag(gorm:"type:int;name:rank")
  int64 updated = 12; // @tag(gorm:"autoUpdateTime:nano")
  int64 created = 13; // @tag(gorm:"autoUpdateTime:nano")
  string createdFormatted = 14; // @tag(sql:"-")
  string updatedFormatted = 15; // @tag(sql:"-")
}














/**
* Add your custom services, and messages here.
* It can be your dto for example. 
* - Use Module.yml for entities, otherwise it won't be managed
* - Don't use this file for entities might be queried by web
**/
      




  

  

  
      
service ScenarioLanguages {
  rpc ScenarioLanguageActionCreate (ScenarioLanguageEntity) returns (ScenarioLanguageCreateReply) {}
  rpc ScenarioLanguageActionUpdate (ScenarioLanguageEntity) returns (ScenarioLanguageCreateReply) {}

  rpc ScenarioLanguageActionQuery (QueryFilterRequest) returns (ScenarioLanguageQueryReply) {}
  rpc ScenarioLanguageActionGetOne (QueryFilterRequest) returns (ScenarioLanguageReply) {}
  rpc ScenarioLanguageActionRemove (QueryFilterRequest) returns (RemoveReply) {}
}

message ScenarioLanguageCreateReply {
	ScenarioLanguageEntity data  = 1;
	IError error = 2;
}

message ScenarioLanguageReply {
	ScenarioLanguageEntity data = 1;
	IError error = 2;
}

message ScenarioLanguageQueryReply {
	repeated ScenarioLanguageEntity items = 1;
	int64 totalItems = 2;
	int64 itemsPerPage = 3;
	int64 startIndex = 4;
	IError error = 5;
}





 
message ScenarioLanguageEntity {
  optional string visibility = 1; // @tag(yaml:"visibility")
  optional string workspaceId = 2; // @tag(yaml:"workspaceId")
  optional string linkerId = 3; // @tag(yaml:"linkerId")
  optional string parentId = 4; // @tag(yaml:"parentId")
  string uniqueId = 5; // @tag(gorm:"primarykey;uniqueId;unique;not null;size:100;" yaml:"uniqueId")
  optional string userId = 6; // @tag(yaml:"userId")
  optional string name = 8; // @tag(  yaml:"name"  )

  int64 rank = 9; // @tag(gorm:"type:int;name:rank")
  int64 updated = 10; // @tag(gorm:"autoUpdateTime:nano")
  int64 created = 11; // @tag(gorm:"autoUpdateTime:nano")
  string createdFormatted = 12; // @tag(sql:"-")
  string updatedFormatted = 13; // @tag(sql:"-")
}












/**
* Add your custom services, and messages here.
* It can be your dto for example. 
* - Use Module.yml for entities, otherwise it won't be managed
* - Don't use this file for entities might be queried by web
**/
      




  

  

  
      
service ScenarioOperationTypes {
  rpc ScenarioOperationTypeActionCreate (ScenarioOperationTypeEntity) returns (ScenarioOperationTypeCreateReply) {}
  rpc ScenarioOperationTypeActionUpdate (ScenarioOperationTypeEntity) returns (ScenarioOperationTypeCreateReply) {}

  rpc ScenarioOperationTypeActionQuery (QueryFilterRequest) returns (ScenarioOperationTypeQueryReply) {}
  rpc ScenarioOperationTypeActionGetOne (QueryFilterRequest) returns (ScenarioOperationTypeReply) {}
  rpc ScenarioOperationTypeActionRemove (QueryFilterRequest) returns (RemoveReply) {}
}

message ScenarioOperationTypeCreateReply {
	ScenarioOperationTypeEntity data  = 1;
	IError error = 2;
}

message ScenarioOperationTypeReply {
	ScenarioOperationTypeEntity data = 1;
	IError error = 2;
}

message ScenarioOperationTypeQueryReply {
	repeated ScenarioOperationTypeEntity items = 1;
	int64 totalItems = 2;
	int64 itemsPerPage = 3;
	int64 startIndex = 4;
	IError error = 5;
}





 
message ScenarioOperationTypeEntity {
  optional string visibility = 1; // @tag(yaml:"visibility")
  optional string workspaceId = 2; // @tag(yaml:"workspaceId")
  optional string linkerId = 3; // @tag(yaml:"linkerId")
  optional string parentId = 4; // @tag(yaml:"parentId")
  string uniqueId = 5; // @tag(gorm:"primarykey;uniqueId;unique;not null;size:100;" yaml:"uniqueId")
  optional string userId = 6; // @tag(yaml:"userId")
  repeated ScenarioOperationTypeEntityPolyglot translations = 7; // @tag(gorm:"foreignKey:LinkerId;references:UniqueId" json:"translations")
  optional string name = 9; // @tag(translate:"true"  yaml:"name"  )

  int64 rank = 10; // @tag(gorm:"type:int;name:rank")
  int64 updated = 11; // @tag(gorm:"autoUpdateTime:nano")
  int64 created = 12; // @tag(gorm:"autoUpdateTime:nano")
  string createdFormatted = 13; // @tag(sql:"-")
  string updatedFormatted = 14; // @tag(sql:"-")
}

/* Because it has translation field, we need a translation table for this */
message ScenarioOperationTypeEntityPolyglot {
  string linkerId = 1; // @tag(gorm:"uniqueId;not null;size:100;" json:"linkerId" yaml:"linkerId")
  string languageId = 2; // @tag(gorm:"uniqueId;not null;size:100;" json:"languageId" yaml:"languageId")

  string name = 3; // @tag(yaml:"name" json:"name");

}












/**
* Add your custom services, and messages here.
* It can be your dto for example. 
* - Use Module.yml for entities, otherwise it won't be managed
* - Don't use this file for entities might be queried by web
**/
      




  

  

  
      
service Triggers {
  rpc TriggerActionCreate (TriggerEntity) returns (TriggerCreateReply) {}
  rpc TriggerActionUpdate (TriggerEntity) returns (TriggerCreateReply) {}

  rpc TriggerActionQuery (QueryFilterRequest) returns (TriggerQueryReply) {}
  rpc TriggerActionGetOne (QueryFilterRequest) returns (TriggerReply) {}
  rpc TriggerActionRemove (QueryFilterRequest) returns (RemoveReply) {}
}

message TriggerCreateReply {
	TriggerEntity data  = 1;
	IError error = 2;
}

message TriggerReply {
	TriggerEntity data = 1;
	IError error = 2;
}

message TriggerQueryReply {
	repeated TriggerEntity items = 1;
	int64 totalItems = 2;
	int64 itemsPerPage = 3;
	int64 startIndex = 4;
	IError error = 5;
}

;

;

;





 
message TriggerEntity {
  optional string visibility = 1; // @tag(yaml:"visibility")
  optional string workspaceId = 2; // @tag(yaml:"workspaceId")
  optional string linkerId = 3; // @tag(yaml:"linkerId")
  optional string parentId = 4; // @tag(yaml:"parentId")
  string uniqueId = 5; // @tag(gorm:"primarykey;uniqueId;unique;not null;size:100;" yaml:"uniqueId")
  optional string userId = 6; // @tag(yaml:"userId")
  repeated TriggerEntityPolyglot translations = 7; // @tag(gorm:"foreignKey:LinkerId;references:UniqueId" json:"translations")
  optional string name = 9; // @tag(translate:"true"  yaml:"name"  )

  /* One 2 one to external entity */
  optional string triggerTypeId  = 11; // @tag(yaml:"triggerTypeId" )
  TriggerTypeEntity triggerType = 12; // @tag(gorm:"foreignKey:TriggerTypeId;references:UniqueId" json:"triggerType" yaml:"triggerType" fbtype:"one")

  /* This is an object, another entity needs to be created for */
  TriggerTriggerTypeCronjobEntity triggerTypeCronjob = 13; // @tag(gorm:"foreignKey:LinkerId;references:UniqueId" yaml:"triggerTypeCronjob" fbtype:"object")

  /* This is an object, another entity needs to be created for */
  TriggerTriggerTypeGpioValueEntity triggerTypeGpioValue = 14; // @tag(gorm:"foreignKey:LinkerId;references:UniqueId" yaml:"triggerTypeGpioValue" fbtype:"object")

  int64 rank = 15; // @tag(gorm:"type:int;name:rank")
  int64 updated = 16; // @tag(gorm:"autoUpdateTime:nano")
  int64 created = 17; // @tag(gorm:"autoUpdateTime:nano")
  string createdFormatted = 18; // @tag(sql:"-")
  string updatedFormatted = 19; // @tag(sql:"-")
}

/* Because it has translation field, we need a translation table for this */
message TriggerEntityPolyglot {
  string linkerId = 1; // @tag(gorm:"uniqueId;not null;size:100;" json:"linkerId" yaml:"linkerId")
  string languageId = 2; // @tag(gorm:"uniqueId;not null;size:100;" json:"languageId" yaml:"languageId")

  string name = 3; // @tag(yaml:"name" json:"name");

}





  

 
message TriggerTriggerTypeCronjobEntity {
  optional string visibility = 1; // @tag(yaml:"visibility")
  optional string workspaceId = 2; // @tag(yaml:"workspaceId")
  optional string linkerId = 3; // @tag(yaml:"linkerId")
  optional string parentId = 4; // @tag(yaml:"parentId")
  string uniqueId = 5; // @tag(gorm:"primarykey;uniqueId;unique;not null;size:100;" yaml:"uniqueId")
  optional string userId = 6; // @tag(yaml:"userId")
  optional string expression = 8; // @tag(  yaml:"expression"  )

  int64 rank = 9; // @tag(gorm:"type:int;name:rank")
  int64 updated = 10; // @tag(gorm:"autoUpdateTime:nano")
  int64 created = 11; // @tag(gorm:"autoUpdateTime:nano")
  string createdFormatted = 12; // @tag(sql:"-")
  string updatedFormatted = 13; // @tag(sql:"-")
}






  

 
message TriggerTriggerTypeGpioValueEntity {
  optional string visibility = 1; // @tag(yaml:"visibility")
  optional string workspaceId = 2; // @tag(yaml:"workspaceId")
  optional string linkerId = 3; // @tag(yaml:"linkerId")
  optional string parentId = 4; // @tag(yaml:"parentId")
  string uniqueId = 5; // @tag(gorm:"primarykey;uniqueId;unique;not null;size:100;" yaml:"uniqueId")
  optional string userId = 6; // @tag(yaml:"userId")
  /* One 2 one to external entity */
  optional string gpioId  = 9; // @tag(yaml:"gpioId" )
  GpioEntity gpio = 10; // @tag(gorm:"foreignKey:GpioId;references:UniqueId" json:"gpio" yaml:"gpio" fbtype:"one")

  /* One 2 one to external entity */
  optional string compareTypeId  = 12; // @tag(yaml:"compareTypeId" )
  ComparisonTypeEntity compareType = 13; // @tag(gorm:"foreignKey:CompareTypeId;references:UniqueId" json:"compareType" yaml:"compareType" fbtype:"one")

  optional int64 compareValueInt = 14; // @tag(  yaml:"compareValueInt"  )

  optional int64 compareValueString = 15; // @tag(  yaml:"compareValueString"  )

  optional double compareValueFloat = 16; // @tag(  yaml:"compareValueFloat"  )

  optional double thresholdPrecentage = 17; // @tag(  yaml:"thresholdPrecentage"  )

  optional int64 beginHour = 18; // @tag(  yaml:"beginHour"  )

  optional int64 endHour = 19; // @tag(  yaml:"endHour"  )

  int64 rank = 20; // @tag(gorm:"type:int;name:rank")
  int64 updated = 21; // @tag(gorm:"autoUpdateTime:nano")
  int64 created = 22; // @tag(gorm:"autoUpdateTime:nano")
  string createdFormatted = 23; // @tag(sql:"-")
  string updatedFormatted = 24; // @tag(sql:"-")
}





















/**
* Add your custom services, and messages here.
* It can be your dto for example. 
* - Use Module.yml for entities, otherwise it won't be managed
* - Don't use this file for entities might be queried by web
**/
      




  

  

  
      
service TriggerTypes {
  rpc TriggerTypeActionCreate (TriggerTypeEntity) returns (TriggerTypeCreateReply) {}
  rpc TriggerTypeActionUpdate (TriggerTypeEntity) returns (TriggerTypeCreateReply) {}

  rpc TriggerTypeActionQuery (QueryFilterRequest) returns (TriggerTypeQueryReply) {}
  rpc TriggerTypeActionGetOne (QueryFilterRequest) returns (TriggerTypeReply) {}
  rpc TriggerTypeActionRemove (QueryFilterRequest) returns (RemoveReply) {}
}

message TriggerTypeCreateReply {
	TriggerTypeEntity data  = 1;
	IError error = 2;
}

message TriggerTypeReply {
	TriggerTypeEntity data = 1;
	IError error = 2;
}

message TriggerTypeQueryReply {
	repeated TriggerTypeEntity items = 1;
	int64 totalItems = 2;
	int64 itemsPerPage = 3;
	int64 startIndex = 4;
	IError error = 5;
}





 
message TriggerTypeEntity {
  optional string visibility = 1; // @tag(yaml:"visibility")
  optional string workspaceId = 2; // @tag(yaml:"workspaceId")
  optional string linkerId = 3; // @tag(yaml:"linkerId")
  optional string parentId = 4; // @tag(yaml:"parentId")
  string uniqueId = 5; // @tag(gorm:"primarykey;uniqueId;unique;not null;size:100;" yaml:"uniqueId")
  optional string userId = 6; // @tag(yaml:"userId")
  repeated TriggerTypeEntityPolyglot translations = 7; // @tag(gorm:"foreignKey:LinkerId;references:UniqueId" json:"translations")
  optional string name = 9; // @tag(translate:"true"  yaml:"name"  )

  int64 rank = 10; // @tag(gorm:"type:int;name:rank")
  int64 updated = 11; // @tag(gorm:"autoUpdateTime:nano")
  int64 created = 12; // @tag(gorm:"autoUpdateTime:nano")
  string createdFormatted = 13; // @tag(sql:"-")
  string updatedFormatted = 14; // @tag(sql:"-")
}

/* Because it has translation field, we need a translation table for this */
message TriggerTypeEntityPolyglot {
  string linkerId = 1; // @tag(gorm:"uniqueId;not null;size:100;" json:"linkerId" yaml:"linkerId")
  string languageId = 2; // @tag(gorm:"uniqueId;not null;size:100;" json:"languageId" yaml:"languageId")

  string name = 3; // @tag(yaml:"name" json:"name");

}












/**
* Add your custom services, and messages here.
* It can be your dto for example. 
* - Use Module.yml for entities, otherwise it won't be managed
* - Don't use this file for entities might be queried by web
**/
      


