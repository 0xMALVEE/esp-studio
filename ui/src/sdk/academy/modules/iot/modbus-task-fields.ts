/**
 * Fields for entity. Use this when creating forms in React/Angular,
 * instead of giving string to each one, use it from here, so in case of
 * updating any fields you don't loose it.
 */

export const ModbusTaskEntityFields = {
  visibility: "visibility",
  workspaceId: "workspaceId",
  linkerId: "linkerId",
  parentId: "parentId",
  uniqueId: "uniqueId",
  userId: "userId",
  name: "name",
  modbusId: "modbusId",
  deviceId: "deviceId",
  device: {
    visibility: "device.visibility",
    workspaceId: "device.workspaceId",
    linkerId: "device.linkerId",
    parentId: "device.parentId",
    uniqueId: "device.uniqueId",
    userId: "device.userId",
    translations: "device.translations",
    name: "device.name",
    model: "device.model",
    ip: "device.ip",
    wifiUser: "device.wifiUser",
    wifiPassword: "device.wifiPassword",
    securityType: "device.securityType",
    typeId: "device.typeId",
    type: {
      visibility: "device.type.visibility",
      workspaceId: "device.type.workspaceId",
      linkerId: "device.type.linkerId",
      parentId: "device.type.parentId",
      uniqueId: "device.type.uniqueId",
      userId: "device.type.userId",
      translations: "device.type.translations",
      name: "device.type.name",
      rank: "device.type.rank",
      updated: "device.type.updated",
      created: "device.type.created",
      createdFormatted: "device.type.createdFormatted",
      updatedFormatted: "device.type.updatedFormatted",
    },
    type$: "type",
    deviceModbusConfig: "device.deviceModbusConfig",
    rank: "device.rank",
    updated: "device.updated",
    created: "device.created",
    createdFormatted: "device.createdFormatted",
    updatedFormatted: "device.updatedFormatted",
    children: "device.children",
  },
  device$: "device",
  connectionTypeId: "connectionTypeId",
  connectionType: {
    visibility: "connectionType.visibility",
    workspaceId: "connectionType.workspaceId",
    linkerId: "connectionType.linkerId",
    parentId: "connectionType.parentId",
    uniqueId: "connectionType.uniqueId",
    userId: "connectionType.userId",
    translations: "connectionType.translations",
    name: "connectionType.name",
    rank: "connectionType.rank",
    updated: "connectionType.updated",
    created: "connectionType.created",
    createdFormatted: "connectionType.createdFormatted",
    updatedFormatted: "connectionType.updatedFormatted",
  },
  connectionType$: "connectionType",
  functionCodeId: "functionCodeId",
  functionCode: {
    visibility: "functionCode.visibility",
    workspaceId: "functionCode.workspaceId",
    linkerId: "functionCode.linkerId",
    parentId: "functionCode.parentId",
    uniqueId: "functionCode.uniqueId",
    userId: "functionCode.userId",
    translations: "functionCode.translations",
    name: "functionCode.name",
    code: "functionCode.code",
    rank: "functionCode.rank",
    updated: "functionCode.updated",
    created: "functionCode.created",
    createdFormatted: "functionCode.createdFormatted",
    updatedFormatted: "functionCode.updatedFormatted",
  },
  functionCode$: "functionCode",
  register: "register",
  writeInterval: "writeInterval",
  readInterval: "readInterval",
  range: "range",
  length: "length",
  variableTypeId: "variableTypeId",
  variableType: {
    visibility: "variableType.visibility",
    workspaceId: "variableType.workspaceId",
    linkerId: "variableType.linkerId",
    parentId: "variableType.parentId",
    uniqueId: "variableType.uniqueId",
    userId: "variableType.userId",
    translations: "variableType.translations",
    name: "variableType.name",
    rank: "variableType.rank",
    updated: "variableType.updated",
    created: "variableType.created",
    createdFormatted: "variableType.createdFormatted",
    updatedFormatted: "variableType.updatedFormatted",
  },
  variableType$: "variableType",
  rank: "rank",
  updated: "updated",
  created: "created",
  createdFormatted: "createdFormatted",
  updatedFormatted: "updatedFormatted",
};
