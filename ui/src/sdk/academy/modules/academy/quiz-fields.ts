/**
 * Fields for entity. Use this when creating forms in React/Angular,
 * instead of giving string to each one, use it from here, so in case of
 * updating any fields you don't loose it.
 */

export const QuizEntityFields = {
  visibility: "visibility",
  workspaceId: "workspaceId",
  linkerId: "linkerId",
  parentId: "parentId",
  uniqueId: "uniqueId",
  userId: "userId",
  title: "title",
  description: "description",
  descriptionExcerpt: "descriptionExcerpt",
  questionsListId: "questionsListId",
  questions: {
    visibility: "questions.visibility",
    workspaceId: "questions.workspaceId",
    linkerId: "questions.linkerId",
    parentId: "questions.parentId",
    uniqueId: "questions.uniqueId",
    userId: "questions.userId",
    bankId: "questions.bankId",
    bank: {
      visibility: "questions.bank.visibility",
      workspaceId: "questions.bank.workspaceId",
      linkerId: "questions.bank.linkerId",
      parentId: "questions.bank.parentId",
      uniqueId: "questions.bank.uniqueId",
      userId: "questions.bank.userId",
      translations: "questions.bank.translations",
      title: "questions.bank.title",
      rank: "questions.bank.rank",
      updated: "questions.bank.updated",
      created: "questions.bank.created",
      createdFormatted: "questions.bank.createdFormatted",
      updatedFormatted: "questions.bank.updatedFormatted",
    },
    bank$: "bank",
    wordCount: "questions.wordCount",
    isPreview: "questions.isPreview",
    durationInSeconds: "questions.durationInSeconds",
    isCorrect: "questions.isCorrect",
    title: "questions.title",
    titleExcerpt: "questions.titleExcerpt",
    body: "questions.body",
    bodyExcerpt: "questions.bodyExcerpt",
    provincesListId: "questions.provincesListId",
    provinces: {
      visibility: "questions.provinces.visibility",
      workspaceId: "questions.provinces.workspaceId",
      linkerId: "questions.provinces.linkerId",
      parentId: "questions.provinces.parentId",
      uniqueId: "questions.provinces.uniqueId",
      userId: "questions.provinces.userId",
      translations: "questions.provinces.translations",
      name: "questions.provinces.name",
      countryId: "questions.provinces.countryId",
      country: {
        visibility: "questions.provinces.country.visibility",
        workspaceId: "questions.provinces.country.workspaceId",
        linkerId: "questions.provinces.country.linkerId",
        parentId: "questions.provinces.country.parentId",
        uniqueId: "questions.provinces.country.uniqueId",
        userId: "questions.provinces.country.userId",
        translations: "questions.provinces.country.translations",
        status: "questions.provinces.country.status",
        flag: "questions.provinces.country.flag",
        commonName: "questions.provinces.country.commonName",
        officialName: "questions.provinces.country.officialName",
        rank: "questions.provinces.country.rank",
        updated: "questions.provinces.country.updated",
        created: "questions.provinces.country.created",
        createdFormatted: "questions.provinces.country.createdFormatted",
        updatedFormatted: "questions.provinces.country.updatedFormatted",
      },
      country$: "country",
      rank: "questions.provinces.rank",
      updated: "questions.provinces.updated",
      created: "questions.provinces.created",
      createdFormatted: "questions.provinces.createdFormatted",
      updatedFormatted: "questions.provinces.updatedFormatted",
    },
    provinces$: "provinces",
    questionLevelId: "questions.questionLevelId",
    questionLevel: {
      visibility: "questions.questionLevel.visibility",
      workspaceId: "questions.questionLevel.workspaceId",
      linkerId: "questions.questionLevel.linkerId",
      parentId: "questions.questionLevel.parentId",
      uniqueId: "questions.questionLevel.uniqueId",
      userId: "questions.questionLevel.userId",
      translations: "questions.questionLevel.translations",
      name: "questions.questionLevel.name",
      rank: "questions.questionLevel.rank",
      updated: "questions.questionLevel.updated",
      created: "questions.questionLevel.created",
      createdFormatted: "questions.questionLevel.createdFormatted",
      updatedFormatted: "questions.questionLevel.updatedFormatted",
    },
    questionLevel$: "questionLevel",
    studyYearId: "questions.studyYearId",
    studyYear: {
      visibility: "questions.studyYear.visibility",
      workspaceId: "questions.studyYear.workspaceId",
      linkerId: "questions.studyYear.linkerId",
      parentId: "questions.studyYear.parentId",
      uniqueId: "questions.studyYear.uniqueId",
      userId: "questions.studyYear.userId",
      translations: "questions.studyYear.translations",
      name: "questions.studyYear.name",
      rank: "questions.studyYear.rank",
      updated: "questions.studyYear.updated",
      created: "questions.studyYear.created",
      createdFormatted: "questions.studyYear.createdFormatted",
      updatedFormatted: "questions.studyYear.updatedFormatted",
    },
    studyYear$: "studyYear",
    schoolTypeId: "questions.schoolTypeId",
    schoolType: {
      visibility: "questions.schoolType.visibility",
      workspaceId: "questions.schoolType.workspaceId",
      linkerId: "questions.schoolType.linkerId",
      parentId: "questions.schoolType.parentId",
      uniqueId: "questions.schoolType.uniqueId",
      userId: "questions.schoolType.userId",
      translations: "questions.schoolType.translations",
      name: "questions.schoolType.name",
      rank: "questions.schoolType.rank",
      updated: "questions.schoolType.updated",
      created: "questions.schoolType.created",
      createdFormatted: "questions.schoolType.createdFormatted",
      updatedFormatted: "questions.schoolType.updatedFormatted",
    },
    schoolType$: "schoolType",
    questionSemesterId: "questions.questionSemesterId",
    questionSemester: {
      visibility: "questions.questionSemester.visibility",
      workspaceId: "questions.questionSemester.workspaceId",
      linkerId: "questions.questionSemester.linkerId",
      parentId: "questions.questionSemester.parentId",
      uniqueId: "questions.questionSemester.uniqueId",
      userId: "questions.questionSemester.userId",
      translations: "questions.questionSemester.translations",
      name: "questions.questionSemester.name",
      rank: "questions.questionSemester.rank",
      updated: "questions.questionSemester.updated",
      created: "questions.questionSemester.created",
      createdFormatted: "questions.questionSemester.createdFormatted",
      updatedFormatted: "questions.questionSemester.updatedFormatted",
    },
    questionSemester$: "questionSemester",
    questionDifficulityLevelId: "questions.questionDifficulityLevelId",
    questionDifficulityLevel: {
      visibility: "questions.questionDifficulityLevel.visibility",
      workspaceId: "questions.questionDifficulityLevel.workspaceId",
      linkerId: "questions.questionDifficulityLevel.linkerId",
      parentId: "questions.questionDifficulityLevel.parentId",
      uniqueId: "questions.questionDifficulityLevel.uniqueId",
      userId: "questions.questionDifficulityLevel.userId",
      translations: "questions.questionDifficulityLevel.translations",
      name: "questions.questionDifficulityLevel.name",
      rank: "questions.questionDifficulityLevel.rank",
      updated: "questions.questionDifficulityLevel.updated",
      created: "questions.questionDifficulityLevel.created",
      createdFormatted: "questions.questionDifficulityLevel.createdFormatted",
      updatedFormatted: "questions.questionDifficulityLevel.updatedFormatted",
    },
    questionDifficulityLevel$: "questionDifficulityLevel",
    choices: "questions.choices",
    rank: "questions.rank",
    updated: "questions.updated",
    created: "questions.created",
    createdFormatted: "questions.createdFormatted",
    updatedFormatted: "questions.updatedFormatted",
  },
  questions$: "questions",
  rank: "rank",
  updated: "updated",
  created: "created",
  createdFormatted: "createdFormatted",
  updatedFormatted: "updatedFormatted",
};
