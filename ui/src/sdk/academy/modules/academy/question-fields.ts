/**
 * Fields for entity. Use this when creating forms in React/Angular,
 * instead of giving string to each one, use it from here, so in case of
 * updating any fields you don't loose it.
 */

export const QuestionEntityFields = {
  visibility: "visibility",
  workspaceId: "workspaceId",
  linkerId: "linkerId",
  parentId: "parentId",
  uniqueId: "uniqueId",
  userId: "userId",
  bankId: "bankId",
  bank: {
    visibility: "bank.visibility",
    workspaceId: "bank.workspaceId",
    linkerId: "bank.linkerId",
    parentId: "bank.parentId",
    uniqueId: "bank.uniqueId",
    userId: "bank.userId",
    translations: "bank.translations",
    title: "bank.title",
    rank: "bank.rank",
    updated: "bank.updated",
    created: "bank.created",
    createdFormatted: "bank.createdFormatted",
    updatedFormatted: "bank.updatedFormatted",
  },
  bank$: "bank",
  wordCount: "wordCount",
  isPreview: "isPreview",
  durationInSeconds: "durationInSeconds",
  isCorrect: "isCorrect",
  title: "title",
  titleExcerpt: "titleExcerpt",
  body: "body",
  bodyExcerpt: "bodyExcerpt",
  provincesListId: "provincesListId",
  provinces: {
    visibility: "provinces.visibility",
    workspaceId: "provinces.workspaceId",
    linkerId: "provinces.linkerId",
    parentId: "provinces.parentId",
    uniqueId: "provinces.uniqueId",
    userId: "provinces.userId",
    translations: "provinces.translations",
    name: "provinces.name",
    countryId: "provinces.countryId",
    country: {
      visibility: "provinces.country.visibility",
      workspaceId: "provinces.country.workspaceId",
      linkerId: "provinces.country.linkerId",
      parentId: "provinces.country.parentId",
      uniqueId: "provinces.country.uniqueId",
      userId: "provinces.country.userId",
      translations: "provinces.country.translations",
      status: "provinces.country.status",
      flag: "provinces.country.flag",
      commonName: "provinces.country.commonName",
      officialName: "provinces.country.officialName",
      rank: "provinces.country.rank",
      updated: "provinces.country.updated",
      created: "provinces.country.created",
      createdFormatted: "provinces.country.createdFormatted",
      updatedFormatted: "provinces.country.updatedFormatted",
    },
    country$: "country",
    rank: "provinces.rank",
    updated: "provinces.updated",
    created: "provinces.created",
    createdFormatted: "provinces.createdFormatted",
    updatedFormatted: "provinces.updatedFormatted",
  },
  provinces$: "provinces",
  questionLevelId: "questionLevelId",
  questionLevel: {
    visibility: "questionLevel.visibility",
    workspaceId: "questionLevel.workspaceId",
    linkerId: "questionLevel.linkerId",
    parentId: "questionLevel.parentId",
    uniqueId: "questionLevel.uniqueId",
    userId: "questionLevel.userId",
    translations: "questionLevel.translations",
    name: "questionLevel.name",
    rank: "questionLevel.rank",
    updated: "questionLevel.updated",
    created: "questionLevel.created",
    createdFormatted: "questionLevel.createdFormatted",
    updatedFormatted: "questionLevel.updatedFormatted",
  },
  questionLevel$: "questionLevel",
  studyYearId: "studyYearId",
  studyYear: {
    visibility: "studyYear.visibility",
    workspaceId: "studyYear.workspaceId",
    linkerId: "studyYear.linkerId",
    parentId: "studyYear.parentId",
    uniqueId: "studyYear.uniqueId",
    userId: "studyYear.userId",
    translations: "studyYear.translations",
    name: "studyYear.name",
    rank: "studyYear.rank",
    updated: "studyYear.updated",
    created: "studyYear.created",
    createdFormatted: "studyYear.createdFormatted",
    updatedFormatted: "studyYear.updatedFormatted",
  },
  studyYear$: "studyYear",
  schoolTypeId: "schoolTypeId",
  schoolType: {
    visibility: "schoolType.visibility",
    workspaceId: "schoolType.workspaceId",
    linkerId: "schoolType.linkerId",
    parentId: "schoolType.parentId",
    uniqueId: "schoolType.uniqueId",
    userId: "schoolType.userId",
    translations: "schoolType.translations",
    name: "schoolType.name",
    rank: "schoolType.rank",
    updated: "schoolType.updated",
    created: "schoolType.created",
    createdFormatted: "schoolType.createdFormatted",
    updatedFormatted: "schoolType.updatedFormatted",
  },
  schoolType$: "schoolType",
  questionSemesterId: "questionSemesterId",
  questionSemester: {
    visibility: "questionSemester.visibility",
    workspaceId: "questionSemester.workspaceId",
    linkerId: "questionSemester.linkerId",
    parentId: "questionSemester.parentId",
    uniqueId: "questionSemester.uniqueId",
    userId: "questionSemester.userId",
    translations: "questionSemester.translations",
    name: "questionSemester.name",
    rank: "questionSemester.rank",
    updated: "questionSemester.updated",
    created: "questionSemester.created",
    createdFormatted: "questionSemester.createdFormatted",
    updatedFormatted: "questionSemester.updatedFormatted",
  },
  questionSemester$: "questionSemester",
  questionDifficulityLevelId: "questionDifficulityLevelId",
  questionDifficulityLevel: {
    visibility: "questionDifficulityLevel.visibility",
    workspaceId: "questionDifficulityLevel.workspaceId",
    linkerId: "questionDifficulityLevel.linkerId",
    parentId: "questionDifficulityLevel.parentId",
    uniqueId: "questionDifficulityLevel.uniqueId",
    userId: "questionDifficulityLevel.userId",
    translations: "questionDifficulityLevel.translations",
    name: "questionDifficulityLevel.name",
    rank: "questionDifficulityLevel.rank",
    updated: "questionDifficulityLevel.updated",
    created: "questionDifficulityLevel.created",
    createdFormatted: "questionDifficulityLevel.createdFormatted",
    updatedFormatted: "questionDifficulityLevel.updatedFormatted",
  },
  questionDifficulityLevel$: "questionDifficulityLevel",
  choices: "choices",
  rank: "rank",
  updated: "updated",
  created: "created",
  createdFormatted: "createdFormatted",
  updatedFormatted: "updatedFormatted",
};
