/**
 * Fields for entity. Use this when creating forms in React/Angular,
 * instead of giving string to each one, use it from here, so in case of
 * updating any fields you don't loose it.
 */

export const LoyaltyCustomerEntityFields = {
  visibility: "visibility",
  workspaceId: "workspaceId",
  linkerId: "linkerId",
  parentId: "parentId",
  uniqueId: "uniqueId",
  userId: "userId",
  note: "note",
  noteExcerpt: "noteExcerpt",
  meetingNote: "meetingNote",
  fullAddress: "fullAddress",
  postalCode: "postalCode",
  fullName: "fullName",
  typeId: "typeId",
  type: {
    visibility: "type.visibility",
    workspaceId: "type.workspaceId",
    linkerId: "type.linkerId",
    parentId: "type.parentId",
    uniqueId: "type.uniqueId",
    userId: "type.userId",
    translations: "type.translations",
    title: "type.title",
    rank: "type.rank",
    updated: "type.updated",
    created: "type.created",
    createdFormatted: "type.createdFormatted",
    updatedFormatted: "type.updatedFormatted",
  },
  type$: "type",
  personalDataId: "personalDataId",
  personalData: {
    visibility: "personalData.visibility",
    workspaceId: "personalData.workspaceId",
    linkerId: "personalData.linkerId",
    parentId: "personalData.parentId",
    uniqueId: "personalData.uniqueId",
    userId: "personalData.userId",
    translations: "personalData.translations",
    firstName: "personalData.firstName",
    lastName: "personalData.lastName",
    phoneNumber: "personalData.phoneNumber",
    nationalId: "personalData.nationalId",
    rank: "personalData.rank",
    updated: "personalData.updated",
    created: "personalData.created",
    createdFormatted: "personalData.createdFormatted",
    updatedFormatted: "personalData.updatedFormatted",
  },
  personalData$: "personalData",
  businessDataId: "businessDataId",
  businessData: {
    visibility: "businessData.visibility",
    workspaceId: "businessData.workspaceId",
    linkerId: "businessData.linkerId",
    parentId: "businessData.parentId",
    uniqueId: "businessData.uniqueId",
    userId: "businessData.userId",
    translations: "businessData.translations",
    name: "businessData.name",
    taxNumber: "businessData.taxNumber",
    contactPeople: "businessData.contactPeople",
    rank: "businessData.rank",
    updated: "businessData.updated",
    created: "businessData.created",
    createdFormatted: "businessData.createdFormatted",
    updatedFormatted: "businessData.updatedFormatted",
  },
  businessData$: "businessData",
  locationsListId: "locationsListId",
  locations: {
    visibility: "locations.visibility",
    workspaceId: "locations.workspaceId",
    linkerId: "locations.linkerId",
    parentId: "locations.parentId",
    uniqueId: "locations.uniqueId",
    userId: "locations.userId",
    lat: "locations.lat",
    lng: "locations.lng",
    physicalAddress: "locations.physicalAddress",
    rank: "locations.rank",
    updated: "locations.updated",
    created: "locations.created",
    createdFormatted: "locations.createdFormatted",
    updatedFormatted: "locations.updatedFormatted",
  },
  locations$: "locations",
  rank: "rank",
  updated: "updated",
  created: "created",
  createdFormatted: "createdFormatted",
  updatedFormatted: "updatedFormatted",
};
