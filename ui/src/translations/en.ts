/**
 * Auto generated from en-translation with 'translation-manager'
 * You CAN edit this file, it would be read again and compared, but remember it would be sorted automatically
 */
export const enTranslations = {
  abac: {
    backToApp: "Go back to the app",
    email: "Email",
    emailAddress: "Email address",
    firstName: "First name",
    lastName: "Last name",
    otpOrDifferent: "Or try a different account instead",
    otpResetMethod: "Reset method",
    otpTitle: "One time password",
    otpTitleHint: "Login to your account via a 6-8 digit pins, which we will\n    send by phone or email. You can change your password later\n    in account center.",
    password: "Password",
    remember: "Remember my credentials",
    signin: "Sign in",
    signout: "Sign out",
    signup: "Sign up",
    signupType: "Signup Type",
    signupTypeHint: "Select how do you want to use software",
    viaEmail: "Send pin via email address",
    viaSms: "Phone number (SMS)",
  },
  about: "About",
  acChecks: {
    moduleName: "Checks",
  },
  acbankbranches: {
    acBankBranchArchiveTitle: "Bank Branches",
    bank: "Bank",
    bankHint: "The bank that this branch belongs to",
    bankId: "Bank",
    city: "City",
    cityHint: "City that this bank branch is located",
    cityId: "City",
    editAcBank: "Edit Bank Branch",
    editAcBankBranch: "Edit Bank Branch",
    locaitonHint: "Physical location of the branch",
    location: "Location",
    name: "Bank Branch Name",
    nameHint: "The branch name of the bank, town may be included",
    newAcBankBranch: "New Bank Branch",
    province: "Province",
    provinceHint: "Province that this bank branch is located",
  },
  acbanks: {
    acBankArchiveTitle: "Banks",
    editAcBank: "Edit Bank",
    name: "Bank name",
    nameHint: "The national name of the bank to make it easier recognize",
    newAcBank: "New Bank",
  },
  accesibility: {
    leftHand: "Left handed",
    rightHand: "Right handed",
  },
  acchecks: {
    acCheckArchiveTitle: "Checks",
    amount: "Amount",
    amountFormatted: "Amount",
    amountHint: "Amount of this check",
    bankBranch: "Bank Branch",
    bankBranchCityName: "City name",
    bankBranchHint: "The branch which has issued this check",
    bankBranchId: "Bank Branch",
    bankBranchName: "Branch name",
    currency: "Currency",
    currencyHint: "The currency which this check is written in",
    customer: "Customer",
    customerHint: "The customer that this check is from or belongs to",
    customerId: "Customer",
    dueDate: "Due Date",
    dueDateFormatted: "Due Date",
    dueDateHint: "The date that this check should be passed",
    editAcCheck: "Edit Check",
    identifier: "Identifier",
    identifierHint: "Identifier is special code for this check or unique id",
    issueDate: "Issue date",
    issueDateFormatted: "Issue Date",
    issueDateHint: "The date that check has been issued",
    newAcCheck: "New Check",
    recipientBankBranch: "Recipient Bank Branch",
    recipientBankBranchHint: "The bank which this check has been taken to",
    recipientCustomer: "Recipient Customer",
    recipientCustomerHint: "The customer who has this check",
    status: "Status",
    statusHint: "The status of this check",
  },
  accheckstatuses: {
    acCheckStatusArchiveTitle: "Check Statuses",
    editAcCheckStatus: "Edit Check Status",
    name: "Status Name",
    nameHint: "Status name which will be assigned to a check in workflow",
    newAcCheckStatus: "New Check Status",
  },
  accountcollections: {
    archiveTitle: "Account Collections",
    editAccountCollection: "Edit Collection",
    name: "Collection Name",
    nameHint: "Name the account collection",
    newAccountCollection: "New Account Collection",
  },
  accounting: {
    account: {
      currency: "Currency",
      name: "Name",
    },
    accountCollections: "Account Collections",
    accountCollectionsHint: "Account Collections",
    amount: "Amount",
    legalUnit: {
      name: "Name",
    },
    settlementDate: "Settlement Date",
    summary: "summary",
    title: "Title",
    transactionDate: "Transaction Date",
  },
  actions: {
    addJob: "+ Add job",
    back: "Back",
    edit: "Edit",
    new: "New",
  },
  addLocation: "Add location",
  alreadyHaveAnAccount: "Already have an account? Sign in instead",
  answerSheet: {
    grammarProgress: "Grammar %",
    listeningProgress: "Listening %",
    readingProgress: "Reading %",
    sourceExam: "Source exam",
    speakingProgress: "Speaking %",
    takerFullname: "Student fullname",
    writingProgress: "Writing %",
  },
  authenticatedOnly: "This section requires you to login before viewing or editing of any kind.",
  b1PolishSample: {
    b12018: "2018 B1 Sample",
    grammar: "Grammar",
    listenning: "Listenning",
    reading: "Reading",
    speaking: "Speaking",
    writing: "Writing",
  },
  backup: {
    generateAndDownload: "Generate & Download",
    generateDescription: "You can create a backup of the system here. It's important to remember\n    you will generate back from data which are visible to you. Making\n    backups must be done using administrative accounts to ensure coverage\n    for all data available in system.",
    generateTitle: "Generate Backup",
    restoreDescription: "You can here import backup files into the system, or data that you\n    have migrated from another installation.",
    restoreTitle: "Restore Backups",
    uploadAndRestore: "Update & Restore",
  },
  banks: {
    title: "Banks",
  },
  classroom: {
    classRoomName: "Classroom name",
    classRoomNameHint: "Enter the classroom title, for example: Spanish Group A1.1",
    description: "Description",
    descriptionHint: "Describe in few words what is this classroom about, so students will find it easily",
    editClassRoom: "Edit classroom",
    gogoleMeetUrlHint: "Put the url that learners will open to access the classroom",
    googleMeetUrl: "Google Meet Url",
    members: "Members",
    membersHint: "Select the students (members) who can access this classroom content, and participate",
    newClassroom: "New classroom",
    provider: "Select provider",
    providerHint: "Providers are softwares that you can host your video call meeting on top of it",
    providers: {
      googleMeet: "Google Meet",
      zoom: "Zoom",
    },
    title: "Classroom",
  },
  close: "Close",
  cloudProjects: {
    clientId: "Client Id",
    name: "Name",
    secret: "Secret",
  },
  common: {
    cancel: "Cancel",
    no: "No",
    noaccess: "You do not have access to this part of the app. Contact your supervisor for consultation",
    parent: "Parent Record",
    parentHint: "Select the parent entity which this belogns to",
    save: "Save",
    yes: "Yes",
  },
  commonProfile: {},
  confirm: "Confirm",
  continue: "Continue",
  controlsheets: {
    active: "Active",
    archiveTitle: "Control Sheets",
    editControlSheet: "Edit Control SHeet",
    inactive: "Inactive",
    isRunning: "Running",
    name: "Name",
    nameHint: "Name of the control sheet for easier access or referencing",
    newControlSheet: "New Control Sheet",
  },
  course: {
    availableCourses: "Available Courses",
    courseDescription: "Course description",
    courseDescriptionHint: "Describe about the course fully, so people can read about it before they enroll",
    courseExcerpt: "Course Excerpt",
    courseExcerptHint: "Summurize the course description in 1 or 2 lines",
    courseId: "Course Id",
    courseTitle: "Course title",
    courseTitleHint: "Enter the Course title, such as Algorithm in C++",
    editCourse: "Edit Course",
    myCourses: "My courses",
    name: "Ali",
    newCourse: "New Course",
    noCourseAvailable: "There are no courses available here. You might need to login with different account to see proprietary courses",
    noCourseEnrolled: "You are not enrolled in any courses at this moment. Find a course below, and enroll.",
    title: "Title",
  },
  createAccount: "Create Account",
  created: "Created Time",
  currentUser: {
    editProfile: "Edit profile",
    profile: "Profile",
    signin: "Sign in",
    signout: "Sign out",
  },
  dashboards: "Dashboards",
  datanodes: {
    addReader: "Add Reader",
    addWriter: "Add Writer",
    archiveTitle: "Data Nodes",
    dataType: "Data Type",
    expanderFunction: "Expander function",
    expanderFunctionHint: "How to cast the content into value array",
    filePath: "File Path",
    filePathHint: "File address on the system",
    key: "Data key",
    keyHint: "Data key is the sub key of a data node",
    keyReadable: "Readable",
    keyReadableHint: "If this sub key is readable",
    keyWritable: "Writable",
    keyWritableHint: "If this sub key is writable",
    modbusRtuAddress: "Address",
    modbusRtuAddressHint: "Address",
    modbusRtuDataBits: "DataBits",
    modbusRtuDataBitsHint: "DataBits",
    modbusRtuParity: "Parity",
    modbusRtuParityHint: "Parity",
    modbusRtuSlaveId: "SlaveId",
    modbusRtuSlaveIdHint: "SlaveId",
    modbusRtuStopBits: "StopBits",
    modbusRtuStopBitsHint: "StopBits",
    modbusRtuTimeout: "Timeout",
    modbusRtuTimeoutHint: "Timeout",
    modbusTcpHost: "Host",
    modbusTcpHostHint: "Host",
    modbusTcpPort: "Port",
    modbusTcpPortHint: "Port",
    modbusTcpSlaveId: "Slave id",
    modbusTcpSlaveIdHint: "Slave id",
    modbusTcpTimeout: "Timeout",
    modbusTcpTimeoutHint: "Timeout",
    mode: "Mode",
    modeHint: "The node data mode",
    mqttBody: "MQTT Body",
    mqttBodyHInt: "The body of the message (string or json) which will be sent",
    mqttTopic: "MQTT Topic",
    mqttTopicHint: "The topic which will be broadcasted",
    nodeReader: "Node Reader",
    nodeReaderConfig: "Node Config",
    nodeReaderConfigHint: "Configurate how this node will be read",
    nodeReaderHint: "Select the Reader which will write data into the node",
    nodeWriter: "Node Writer",
    nodeWriterHint: "Select the Writer which will write data into the node",
    serialPort: "SerialPort",
    serialPortHint: "Select the serial port that data will be written to",
    type: "Data Type",
    typeHint: "The type of data that this node holds or transmits",
    udpHost: "Host",
    udpHostHint: "UDP Host Address",
    udpPort: "Port",
    udpPortHint: "UDP Port Number",
  },
  datepicker: {
    day: "Day",
    month: "Month",
    year: "Year",
  },
  debugInfo: "Show debug information",
  deleteAction: "Delete",
  deleteConfirmMessage: "Are you sure to delete the selected items?",
  deleteConfirmation: "Are you sure?",
  devices: {
    deviceModbusConfig: "Device Modbus Config",
    deviceModbusConfigHint: "Configuration for device in modbus",
    devicetemplateArchiveTitle: "Devices",
    editDevice: "Edit Device",
    ip: "IP",
    ipHint: "Device IP v4 Address",
    model: "Model",
    modelHint: "Device model number",
    name: "Device Name",
    nameHint: "Device name to recognize this easier later",
    newDevice: "New Device",
    securityType: "Security Type",
    securityTypeHint: "The authentication method for wireless network",
    type: "Type",
    typeHint: "Device Type",
    typeId: "Type",
    typeIdHint: "The type of the device",
    wifiPassword: "Wifi Password",
    wifiPasswordHint: "Wifi Password",
    wifiSSID: "Wifi SSID",
    wifiSSIDHint: "Wifi SSID",
  },
  devicetype: {
    archiveTitle: "Device Types",
    editDeviceType: "Edit device Type",
    name: "Device Type Name",
    nameHint: "Device type",
    newDeviceType: "New Device Type",
  },
  diagram: "Diagram",
  drive: {
    attachFile: "Attach file",
    driveTitle: "Drive",
    menu: "Drive & Files",
    name: "Name",
    size: "Size",
    title: "Title",
    type: "Type",
    viewPath: "View Path",
    virtualPath: "Virtual Path",
  },
  dropNFiles: "Drop {n} file(s) to begin the upload",
  edit: "Edit",
  errors: {
    UNKOWN_ERRROR: "Unknown error occured",
  },
  exam: {
    startInstruction: "Start a new exam by clicking on the button, we keep track of your progress so you can come back later.",
    startNew: "Start a new exam",
    title: "Exam",
  },
  examProgress: {
    grammarProgress: "Grammar Progress:",
    listeningProgress: "Listening Progress:",
    readingProgress: "Reading Progress:",
    speakingProgress: "Speaking Progress:",
    writingProgress: "Writing Progress:",
  },
  examSession: {
    highlightMissing: "Highlight Missing",
    showAnswers: "Show answers",
  },
  fb: {
    commonProfile: "Edit your profile",
    editMailProvider: "Email provider",
    editMailSender: "Edit Email sender",
    editPublicJoinKey: "Edit Public Join Key",
    editRole: "Edit role",
    editWorkspaceType: "Edit Workspace Type",
    newMailProvider: "New Email provider",
    newMailSender: "New Email sender",
    newPublicJoinKey: "New Public Join Key",
    newRole: "New role",
    newWorkspaceType: "New Workspace Type",
    publicJoinKey: "Public Join Key",
  },
  fbMenu: {
    emailProvider: "Email Provider",
    emailProviders: "Email Providers",
    emailSender: "Email Sender",
    emailSenders: "Email Senders",
    gsmProvider: "GSM Provider",
    keyboardShortcuts: "Shortcuts",
    myInvitations: "My Invitations",
    publicJoinKey: "Public join keys",
    roles: "Roles",
    title: "System",
    users: "Users",
    workspaceInvites: "Invites",
    workspaceTypes: "Workspace Types",
    workspaces: "Workspaces",
  },
  featureNotAvailableOnMock: "Not available on the mock server. The version you are using is basically a demo, and runs without a real server. Things are not being saved, or do not represent a real flow.",
  financeMenu: {
    accountName: "Account Name",
    accountNameHint: "Type in a new for the account to represent its usage",
    amount: "Amount",
    amountHint: "Enter the amount of the payment",
    currency: "Currency",
    currencyHint: "Select the currency that this account should be in",
    editPaymentRequest: "Edit the payment request",
    editVirtualAccount: "Edit Virtual account",
    newPaymentRequest: "New payment request",
    newVirtualAccount: "New virtual account",
    paymentMethod: "Payment method",
    paymentMethodHint: "Select payment method mechanism",
    paymentRequest: "Payment Request",
    paymentRequests: "Payment Requests",
    paymentStatus: "Payment Status",
    subject: "Subject",
    summary: "Summary",
    title: "Finances",
    transaction: {
      amount: "Amount",
      subject: "Subject",
      summary: "Summary",
    },
    virtualAccount: "Virtual Account",
    virtualAccountHint: "Select virtual account which payment will be to",
    virtualAccounts: "Virtual Accounts",
  },
  firstTime: "First time in the app, or lost password?",
  flowvalues: {
    archiveTitle: "Data History",
    connectionId: "Connection Id",
    connectionIdHint: "Value of the specific connection",
    editFlowValue: "Edit Flow Value",
    newFlowValue: "New Flow Value",
    report: "Report",
    valueFloat: "Float Value",
    valueFloatHint: "Floating point value",
    valueInt: "Int Value",
    valueIntHint: "Numeric value",
    valueString: "String Value",
    valueStringHint: "String value",
    valueType: "Value Type",
    valueTypeHint: "Type of the value which has been saved",
  },
  forcedLayout: {
    forcedLayoutGeneralMessage: "You need to login before accessing this section",
  },
  forgotPassword: "Forgot password",
  generalSettings: {
    accessibility: {
      description: "Handle the accessibility settings",
      title: "Accessibility",
    },
    debugSettings: {
      description: "See the debug information of the app, for developers or help desks",
      title: "Debug Settings",
    },
    grpcMethod: "Over grpc",
    hostAddress: "Host address",
    httpMethod: "Over http",
    interfaceLang: {
      description: "Here you can change your software interface langauge settings",
      title: "Language & Region",
    },
    port: "Port",
    remoteDescripton: "Remote service, is the place that all data, logics, and services are installed there. It could be cloud, or locally. Only advanced users, changing it to wrong address might cause inaccessibility.",
    remoteTitle: "Remote service",
    richTextEditor: {
      description: "Manage how you want to edit textual content in the app",
      title: "Text Editor",
    },
    theme: {
      description: "Change the interface theme color",
      title: "Theme",
    },
  },
  geo: {
    geocities: {
      country: "Country",
      countryHint: "The country that this city is located",
      editGeoCity: "Edit City",
      geoCityArchiveTitle: "Cities",
      menu: "Cities",
      name: "City name",
      nameHint: "City name",
      newGeoCity: "New City",
      province: "Province",
      provinceHint: "The province that this city is located",
    },
    geocountries: {
      editGeoCountry: "Edit Country",
      geoCountryArchiveTitle: "Countries",
      menu: "Countries",
      name: "Country name",
      nameHint: "Country name",
      newGeoCountry: "New Country",
    },
    geoprovinces: {
      country: "Country",
      editGeoProvince: "Edit Province",
      geoProvinceArchiveTitle: "Provinces",
      menu: "Provinces",
      name: "Province name",
      nameHint: "Province name",
      newGeoProvince: "New Province",
    },
    lat: "Latitude",
    lng: "Longitute",
    menu: "Geo Tools",
  },
  geolocations: {
    archiveTitle: "Locations",
    children: "children",
    childrenHint: "children Hint",
    code: "Code",
    codeHint: "Code Hint",
    editGeoLocation: "Edit",
    flag: "Flag",
    flagHint: "Flag of the country in unicode",
    name: "name",
    nameHint: "name Hint",
    newGeoLocation: "New Geo Location",
    officialName: "Official Name",
    officialNameHint: "",
    status: "Status",
    statusHint: "Status",
    type: "Type",
    typeHint: "Type of the location",
  },
  gpiomodes: {
    archiveTitle: "Gpio Modes",
    description: "Description",
    descriptionHint: "More details about gpio mode",
    editGpioMode: "Edit Gpio Mode",
    index: "Index",
    indexHint: "Numeric Index",
    key: "Numeric Key",
    keyHint: "Numeric Key",
    newGpioMode: "New Gpio Mode",
  },
  gpios: {
    analogFunction: "Analog Function",
    analogFunctionHint: "Analog function information",
    archiveTitle: "Gpios",
    comments: "Comments",
    commentsHint: "More details or information about GPIO",
    editGpio: "Edit Gpio",
    index: "Gpio Numeric Index",
    indexHint: "The number of the GPIO (Pin number)",
    modeId: "Mode",
    modeIdHint: "The mode of gpio to be used when device starts",
    name: "Gpio Name",
    nameHint: "Name of the GPIO, e.g. GPIO_1",
    newGpio: "New Gpio",
    rtcGpio: "RTC Gpio",
    rtcGpioHint: "RTC Gpio information",
  },
  gpiostates: {
    archiveTitle: "Gpio State",
    editGpioState: "Edit Gpio State",
    gpio: "GPIO",
    gpioHint: "Select the GPIO from list. Index will be selected from there",
    gpioMode: "Mode",
    gpioModeHint: "Select the mode which this pin will be configurated",
    high: "High (On)",
    low: "Low (Off)",
    newGpioState: "New Gpio State",
    value: "Value",
    valueHint: "The current state of the pin",
  },
  gsmproviders: {
    apiKey: "API Key",
    apiKeyHint: "Api key is the access token for sending messages",
    editGsmProvider: "Edit GSM Provider",
    gsmProviderArchiveTitle: "GSM Providers",
    invokeBody: "Invoke Body",
    invokeBodyHint: "The Post body that will be send to the api ",
    invokeUrl: "Invoke url",
    invokeUrlHint: "The URL of the thirdparty service to send text messages",
    mainSenderNumber: "Sender Number",
    mainSenderNumberHint: "The phone number which will be used to send text messages",
    newGsmProvider: "New GSM Provider",
    terminal: "Terminal",
    type: "Type",
    typeHint: "Type of the gsm provider (different options may be available)",
    url: "Webservice",
  },
  hmicomponents: {
    archiveTitle: "Hmi Components",
    editHmiComponent: "Edit HmiComponent",
    hmi: "hmi",
    hmiHint: "hmi Hint",
    hmiId: "hmiId",
    hmiIdHint: "hmiId Hint",
    icon: "icon",
    iconHint: "icon Hint",
    label: "Label",
    labelHint: "Label of the component on the screen",
    layoutMode: "layoutMode",
    layoutModeHint: "layoutMode Hint",
    newHmiComponent: "New HmiComponent",
    noComponents: "There are no components on this hmi screen. Add them using + icon to begin monitoring and controlling",
    position: "position",
    positionHint: "position Hint",
    read: "Data Node",
    readHint: "Select the data node to be read or write",
    states: "states",
    statesHint: "states Hint",
    type: "Component type",
    typeHint: "Choose the type of the component",
    write: "write",
    writeHint: "write Hint",
    writeId: "writeId",
    writeIdHint: "writeId Hint",
  },
  hmis: {
    archiveTitle: "Hmis",
    editHmi: "Edit Hmi",
    name: "Hmi Name",
    nameHint: "Name of the hmi to recognize",
    newHmi: "New Hmi",
  },
  home: {
    line1: "{username}, welcome to dEIA",
    line2: "PixelPlux’s environmental impact assessment tool",
    title: "GADM",
  },
  intacodes: {
    description: "Description",
    descriptionHint: "Description of this intacode",
    editIntacode: "Edit Intacode",
    intacodeArchiveTitle: "Intacodes",
    margin: "Margin",
    marginHint: "The amount of revenue this type of intacode has",
    newIntacode: "New Intacode",
    note: "Note",
    noteHint: "Note about the intacode",
    year: "Year",
    yearHint: "Year which this intacode applies",
  },
  iot: {
    dataNodeDatum: "Data Node History",
    dataNodeName: "Data node name",
    dataNodeNameHint: "Data node is a data type name, for recognition among the app",
    dataNodes: "Data nodes",
    editDataNode: "Edit Data Node",
    ingestedAt: "Ingested At",
    newDataNode: "New Data Node",
    title: "IOT",
    valueFloat64: "Value Float64",
    valueInt64: "Value Int64",
    valueString: "Value String",
  },
  jalaliMonths: {
    "0": "Farvardin",
    "1": "Ordibehesht",
    "2": "Khordad",
    "3": "Tir",
    "4": "Mordad",
    "5": "Shahrivar",
    "6": "Mehr",
    "7": "Aban",
    "8": "Azar",
    "9": "Dey",
    "10": "Bahman",
    "11": "Isfand",
  },
  jobsList: {
    completionDate: "Completion Date",
    consumerId: "Consumer Id",
    projectCode: "Project Code",
    projectName: "Project Name",
    result: "Result",
    status: "Status",
    submissionDate: "Submission Date",
  },
  katexPlugin: {
    body: "Formula",
    cancel: "Cancel",
    insert: "Insert",
    title: "Katex Plugin",
    toolbarName: "Insert Formula",
  },
  keyboardShortcut: {
    action: "Action",
    defaultBinding: "Default Key Binding",
    keyboardShortcut: "Keyboard Shortcuts",
    pressToDefine: "Press to define",
    userDefinedBinding: "User Defined Bindings",
  },
  lackOfPermission: "You need more permissions, in order to access this part of the software.",
  learningMenu: {
    answerSheets: "AnswerSheets",
    enrolledCourses: "Enrolled Courses",
    myClassRooms: "Classes",
    myCourses: "Courses",
    myExams: "Exams",
    practiseBoard: "Practise Board",
    title: "Learning",
  },
  licenses: {
    activationKeySeries: "Series",
    activationKeys: "Activation Keys",
    code: "Code",
    duration: "Duration (Days)",
    durationHint: "The length of activation period for license one it is activated",
    editActivationKey: "Edit Activation Key",
    editLicensableProduct: "Edit licensable product",
    editLicense: "Edit license",
    editProductPlan: "Edit product plan",
    endDate: "End Date",
    licensableProducts: "Licensable Products",
    licenseName: "License Name",
    licenseNameHint: "The name of the license, could be combination of different things",
    licenses: "Licenses",
    menuActivationKey: "Activation Keys",
    menuLicenses: "Licenses",
    menuProductPlans: "Plans",
    menuProducts: "Products",
    newActivationKey: "New Activation Key",
    newLicensableProduct: "New licensable product",
    newLicense: "New license",
    newProductPlan: "New product plan",
    planName: "Plan",
    planNameHint: "Select the activation key for that specific plan",
    planProductName: "Plan's product",
    planProductNameHint: "Select the product which you want this plan to be for.",
    privateKey: "Private Key",
    privateKeyHint: "License private key which would be used to issue certificate",
    productName: "Product name",
    productNameHint: "Product name could be anything that customers would recognize",
    productPlanName: "Plan name",
    productPlanNameHint: "Set a name for this plan, for example starter, or professional",
    productPlans: "Product plans",
    publicKey: "Public Key",
    publicKeyHint: "License public key which would be used to issue certificate",
    series: "Series",
    seriesHint: "Set a tag as series, for example first_1000_codes so you can recognize when you created them",
    startDate: "Start Date",
  },
  locale: {
    englishWorldwide: "English (Worldwide)",
    persianIran: "Persian (Iran)",
    polishPoland: "Polish (Polski)",
  },
  loginButton: "Login",
  loginButtonOs: "Login With OS",
  loyalty: {
    addContactPerson: "Add contact",
    business: {
      name: "Business name",
      nameHint: "Business name",
      taxNumber: "Tax number",
      taxNumberHint: "Tax number",
    },
    customerContacts: "Contact numbers",
    customerGeneralInfo: "General Information",
    customerLocations: "Customer Locations",
    customerType: "Customer Type",
    customerTypeHint: "Form content depends on the customer type",
    customers: "Customers",
    editLoyaltyCustomer: "Edit customer information",
    emailAddress: "Email Address",
    firstName: "First name",
    firstNameHint: "Customer first name",
    fullAddress: "Full address",
    fullAddressHint: "Full address of the company",
    fullName: "Full name",
    lastName: "Last name",
    lastNameHint: "Customer last name",
    meetingNote: "Meeting note",
    meetingNoteHint: "Write how did you meet this client, as a note for future",
    menu: "Loyalty",
    nationalId: "National Id",
    nationalIdHint: "National Id of the customer",
    newLoyaltyCustomer: "New Customer",
    noCustomerData: "There are no customer data at all to show here.",
    note: "Note",
    noteHint: "A note about this customer, (visible to everyone in this workspace)",
    phoneNumber: "Phone number",
    phoneNumberHint: "User Phone number",
  },
  mailProvider: {
    apiKey: "Api Key",
    apiKeyHint: "The API key related to the mail service provider, if applicable",
    fromEmailAddress: "From email address",
    fromEmailAddressHint: "The address you are sending from, generally it needs to be registered in mail service",
    fromName: "From name",
    fromNameHint: "Sender name",
    nickName: "Nick name",
    nickNameHint: "Email sender nick name, usually the sales person or customer support",
    replyTo: "Reply to",
    replyToHint: "The address which receipent is gonna reply to. (noreply@domain) for example",
    senderAddress: "Sender address",
    senderName: "Sender name",
    type: "Service Type",
    typeHint: "Select the mail provider from list. Under the list you can find all providers we support.",
  },
  menu: {
    answerSheets: "Answer Sheets",
    classRooms: "Classrooms",
    courses: "Courses",
    exams: "Exams",
    personal: "Personalize",
    questionBanks: "Question Banks",
    questions: "Questions",
    quizzes: "Quizzes",
    settings: "Settings",
    title: "Actions",
    units: "Units",
  },
  meta: {
    titleAffix: "PixelPlux",
  },
  misc: {
    currencies: "Currencies",
    currency: {
      editCurrency: "Edit currency",
      name: "Name",
      nameHint: "Name of the currrency",
      newCurrency: "New currency",
      symbol: "Symbol",
      symbolHint: "Symbol of the currency, usually the unicode character",
      symbolNative: "Symbol Native",
      symbolNativeHint: "The symbol of the currency, which is used in the local country",
    },
    title: "Misc",
  },
  mockNotice: "This is a demo version of the app. There is no backend, nothing is being stored, or should not work properly",
  modbusconnectiontypes: {
    archiveTitle: "Connection Types",
    editModbusConnectionType: "Edit Connection Type",
    name: "Connection Type Name",
    nameHint: "The name of protocol which could be used for connection",
    newModbusConnectionType: "New Connection Type",
  },
  modbusfunctioncodes: {
    archiveTitle: "Modbus Functions",
    code: "Numeric Code",
    codeHint: "The function numeric code for reading the function",
    editModbusFunctionCode: "Edit Modbus Function",
    name: "Function name",
    nameHint: "The name of the function",
    newModbusFunctionCode: "New Modbus Function",
  },
  modbustasks: {
    archiveTitle: "Modbus Tasks",
    connectionType: "Connection Type",
    connectionTypeHint: "Modbus Connection Type",
    device: "Device",
    deviceHint: "Device that this modbus task belongs to",
    editModbusTask: "Edit Modbus Task",
    functionCode: "Function Code",
    functionCodeHint: "Modbus Function Code",
    length: "Length",
    lengthHint: "Message Length",
    modbusId: "Modbus Id",
    modbusIdHint: "Modbus Id",
    name: "Task name",
    nameHint: "Name the modbus task",
    newModbusTask: "New Modus Task",
    range: "Range",
    rangeHint: "Range",
    readInterval: "Read Interval",
    readIntervalHint: "Read Interval Hint",
    register: "Register",
    registerHint: "The register which this modbus will read it",
    variableType: "Variable Type",
    variableTypeHint: "Variable Type",
    writeInterval: "Write Interval",
    writeIntervalHint: "Write Interval",
  },
  modbusvariabletypes: {
    archiveTitle: "Modbus Variables",
    editModbusVariableType: "Edit Modbus Variable",
    name: "Variable Name",
    nameHint: "The human readable of the variable",
    newModbusVariableType: "New Modbus Variable",
  },
  mqttconfigs: {
    archiveTitle: "MQTT Settings",
    autoReconnect: "Auto Reconnect",
    autoReconnectHint: "AutoReconnect will connect to mqtt on disconnect or on app start",
    cleanSession: "Clean Session",
    cleanSessionHint: "Clean Session",
    clientId: "Client Id",
    clientIdHint: "ClientId",
    connectTimeout: "Connect Timeout",
    connectTimeoutHint: "Connect Timeout",
    editMqttConfig: "Edit",
    host: "Host",
    hostHint: "Host address (IP Usually with mqtt:// prefix)",
    keepAlive: "Keep Alive",
    keepAliveHint: "keepAlive miliseconds",
    lastWillPayload: "Last Will Payload",
    lastWillPayloadHint: "Last Will Payload",
    lastWillQos: "Last Will Qos",
    lastWillQosHint: "Last Will Qos",
    lastWillRetain: "Last Will Retain",
    lastWillRetainHint: "Last Will Retain",
    lastWillTopic: "Last Will Topic",
    lastWillTopicHint: "Last Will Topic",
    mqttVersion: "Mqtt Version",
    mqttVersionHint: "MqttVersion",
    name: "Name",
    nameHint: "Name the MQTT Server",
    newMqttConfig: "Edit",
    password: "password",
    passwordHint: "MQTT Server password",
    port: "PORT",
    portHint: "MQTT Server Port, usually 1883",
    ssl: "Use SSL/TSL",
    sslHint: "Use secure encrypted connection",
    username: "Username",
    usernameHint: "MQTT Server username",
  },
  mqttconnections: {
    archiveTitle: "Mqtt Connections",
  },
  myClassrooms: {
    availableClassrooms: "Available classrooms",
    noCoursesAvailable: "There are no courses available here. You might need to login with different account to see proprietary",
    title: "My classrooms",
    youHaveNoClasses: "You are not added to any class rooms.",
  },
  networkError: "You are not connected to the network, getting data failed. Check your network connection. If you have connection, it's possible that our server is temporarily offline or on maintenance",
  noOptions: "No Options",
  noPendingInvite: "There are no pending invitation for you.",
  noSignupType: "Creating account is not available now. Contact the administration",
  node: {
    Oddeven: "Odd/even",
    average: "Average",
    circularInput: "Radial",
    color: "Color",
    containerLevelValue: "Container",
    cron: "Cron",
    delay: "Delay",
    digital: "Digital",
    interpolate: "Interpolate",
    run: "Run",
    source: "Source",
    stop: "Stop",
    switch: "Switch",
    target: "Target",
    timer: "Timer",
    value: "Value",
    valueGauge: "Gague",
  },
  not_found_404: "The page you are looking for might have been removed, its URL changed or is temporarily unavailable.",
  notfound: "Resource you are looking for is not available on this version of the api.",
  pages: {
    catalog: "Catalog",
    feedback: "Feedback",
    jobs: "My jobs",
  },
  payments: {
    approve: "Approve",
    reject: "Reject",
  },
  priceTag: {
    add: "Add price variation",
    priceTag: "Price Tag",
    priceTagHint: "Definition of the price in different regions, when user wants to purchase",
  },
  question: {
    editQuestion: "New Question",
    newQuestion: "New Question",
  },
  questionBank: {
    editEntity: "Edit Question Bank",
    editQuestion: "Edit Question",
    name: "Bank name",
    newEntity: "New Question Bank",
    newQuestion: "New Question",
    title: "Question Bank title",
    titleHint: 'Name the question bank, such as "504 Questions for Electrical Design"',
  },
  questionSemester: {
    editQuestionSemester: "Edit Question Semester",
    menu: "Question Semesters",
    name: "Semester Name",
    nameHint: "Question Semester usually indicates which month the question was used",
    newQuestionSemester: "New Question Semester",
    questionSemesterArchiveTitle: "Question Semesters",
  },
  questionlevels: {
    editQuestionLevel: "Edit Question Level",
    name: "Quesiton Level",
    nameHint: "Define the level which could be used in question section",
    newQuestionLevel: "New Question Level",
    questionLevelArchiveTitle: "Question Levels",
  },
  questions: {
    addAnswerHint: "Click to add a new answer to question",
    addQuestion: "Add Question",
    answer: "Answer",
    answerHint: "One of possible answers or the only one",
    durationInSeconds: "Answer time in seconds",
    durationInSecondsHint: "The amount of time student has to answer this question",
    province: "Province",
    provinceHint: "Choose the provinces that this question belonged to",
    question: "Question",
    questionBank: "Question bank",
    questionBankHint: "The question bank which question belongs to",
    questionDifficulityLevel: "Difficulity level",
    questionDifficulityLevelHint: "How hard is this question for students to answer",
    questionLevel: "Question level",
    questionLevelHint: "Question level coutry-wise, is provincial, etc.",
    questionSchoolType: "School Type",
    questionSchoolTypeHint: "The type of the school that this question belongs to",
    questionSemester: "Question Semester",
    questionSemesterHint: "When this question has appeared (in which semester)",
    questionTitle: "Question title",
    questionTitleHint: "Question title is the main question that someone should give answer to",
    questions: "Questions",
    studyYear: "Study Year",
    studyYearHint: "The year which this question has been appeared",
  },
  quiz: {
    editQuiz: "Edit Quiz",
    name: "Name",
    newQuiz: "New Quiz",
  },
  reactiveSearch: {
    noResults: "There are no results :)",
    placeholder: "Search (Press S)...",
  },
  requestReset: "Request Reset",
  resume: {
    clientLocation: "Client Location:",
    companyLocation: "Company Location:",
    jobCountry: "Country that I did the job:",
    keySkills: "Key Skills",
    level: "Level",
    level_1: "Explorer",
    level_2: "Medium",
    level_3: "Common User",
    level_4: "Advanced",
    level_5: "Architect",
    noScreenMessage1: "Welcome to this resume. If you are seeing PDF Version, it might be long to\n      read all. Please visit",
    noScreenMessage2: "and you can modify this content easily, sort, remove technical or general\n    description. Also you can see live examples, and videos I have prepared.",
    preferredPositions: "Preferred Positions",
    products: "Products",
    projectDescription: "Project Description",
    projects: "Projects",
    services: "Services",
    showDescription: "Show Description",
    showTechnicalInfo: "Show Technical Information",
    skillDuration: "Skill Duration",
    skillName: "Skill Name",
    technicalDescription: "Technical Description",
    usage: "Usage",
    usage_1: "Randomly",
    usage_2: "Often",
    usage_3: "Common usage",
    usage_4: "Advanced",
    usage_5: "Professional User",
    videos: "Videos",
    years: "Years",
  },
  role: {
    name: "Name",
    permissions: "Permissions",
  },
  saveChanges: "Apply",
  scenariolanguages: {
    archiveTitle: "Scenario Languages",
    editScenarioLanguage: "Edit Scenario Language",
    name: "Scenario Language",
    nameHint: "The name of the scenario",
    newScenarioLanguage: "New Scenario Language",
  },
  scenariooperationtypes: {
    archiveTitle: "Operation Types",
    editScenarioOperationType: "Edit Operation Type",
    name: "Operation Type Name",
    nameHint: "Name of the operation type",
    newScenarioOperationType: "New Operation Type",
  },
  scenarios: {
    archiveTitle: "Scenarios",
    editScenario: "Edit Scenario",
    lammerSequences: "Lammer Sequence",
    lammerSequencesHint: "Define the scenario operation in lammer language",
    name: "Scenario Name",
    nameHint: "Name of the scenario when starting it",
    newScenario: "New Scenario",
    script: "Script",
    scriptHint: "Script that should run when scenario starts",
  },
  schooltypes: {
    editSchoolType: "Edit School Type",
    menu: "School Types",
    name: "School Name",
    nameHint: "School type general name which people recognize",
    newSchoolType: "New School Type",
    schoolTypeTitle: "School Types",
  },
  searchplaceholder: "Search...",
  selectPlaceholder: "- Select an option -",
  settings: {
    apply: "Apply",
    inaccessibleRemote: "In accessible remote.",
    interfaceLanguage: "Interface language",
    interfaceLanguageHint: "The language that you like the interface to be shown to you",
    preferredHand: "Prefered hand",
    preferredHandHint: "Select which hand you are most often using phone so some options would be closer to your primary hand",
    remoteAddress: "Remote address",
    serverConnected: "Server is connected successfully",
    textEditorModule: "Text Editor Module",
    textEditorModuleHint: "You can select between different text editors we provide, and use the one you are more comfortable with",
    theme: "Theme",
    themeHint: "Select the interface theme",
  },
  signinInstead: "Sign in",
  signup: {
    continueAs: "Continue as {currentUser}",
    continueAsHint: "By logging in as <strong>{currentUser}</strong>, all your information,\n    will be stored offline inside your computer, under this user\n    permissions.",
    defaultDescription: "In order to create an account, please fill out the fields below",
    mobileAuthentication: "In order to login with mobile enter your phone number",
    signupToWorkspace: "In order to signup as {roleName}, fill the fields below",
  },
  signupButton: "Signup",
  simpleTextEditor: "System simple text editor",
  studentExams: {
    history: "Exam history",
    noExams: "There are no exams to take",
    noHistory: "You never participated in any kind of exams, when you select and study an exam, it will become listed here.",
    title: "Exams",
  },
  studentRooms: {
    title: "My classrooms",
  },
  studyYears: {
    editStudyYear: "Edit Study Year",
    name: "Name",
    nameHint: "The study year, for example 2019-2020",
    newStudyYear: "New Study Year",
    studyYearArchiveTitle: "Study Years",
  },
  table: {
    created: "Created",
    filter: {
      contains: "Contains",
      endsWith: "Ends With",
      equal: "Equal",
      filterPlaceholder: "Filter...",
      greaterThan: "Greater Than",
      greaterThanOrEqual: "Greater or equal",
      lessThan: "Less Than",
      lessThanOrEqual: "Less or equal",
      notContains: "Not Contains",
      notEqual: "Not Equal",
      startsWith: "Starts With",
    },
    info: "Info",
    next: "Next",
    noRecords: "There are no records available to show. To create one, press on Plus button.",
    previous: "Previous",
    uniqueId: "id",
    value: "Value",
  },
  tempControlWidget: {
    decrese: "Decrease",
    increase: "Increase",
  },
  tinymceeditor: "TinyMCE Editor",
  triggers: {
    archiveTitle: "Triggers",
    editTrigger: "Edit Trigger",
    name: "Trigger Name",
    nameHint: "Name the trigger to find it easier",
    newTrigger: "New Trigger",
    triggerType: "Trigger Type",
    triggerTypeCronjob: "Trigger Cronjob",
    triggerTypeCronjobHint: "Define the trigger cronjob",
    triggerTypeGpioValue: "Trigger Gpio Value",
    triggerTypeGpioValueHint: "Trigger on change for gpio value",
    triggerTypeHint: "Kind of the trigger",
    triggerTypeId: "Trigger Type",
    triggerTypeIdHint: "Kind of the trigger",
  },
  triggertypes: {
    archiveTitle: "Trigger Types",
    editTriggerType: "Edit Trigger Type",
    name: "Trigger Type name",
    nameHint: "Name the trigger to find it easier",
    newTriggerType: "New Trigger Type",
  },
  tuyaDevices: {
    cloudProjectId: "Cloud Project Id",
    name: "Tuya device name",
  },
  unit: {
    editUnit: "Edit unit",
    newUnit: "New unit",
    title: "Title",
  },
  units: {
    content: "Content",
    editUnit: "Edit Unit",
    newUnit: "New Unit",
    parentId: "Parent Id",
    subUnits: "Sub units",
  },
  unnamedRole: "Unknown role",
  unnamedWorkspace: "Unnamed workspace",
  user: {
    editUser: "Edit User",
    newUser: "New User",
  },
  users: {
    firstName: "First name",
    lastName: "Last name",
  },
  webrtcconfig: "WebRTC Configuration",
  widgetPicker: {
    instructions: "Press <kbd>Arrows</kbd> from keyboard to change slide <br />",
    instructionsFlat: "Press <kbd>Arrows</kbd> from keyboard to change slide <br />\n    Press <kbd>Ctrl</kbd> + <kbd>Arrows</kbd> from keyboard to switch to\n    flat mode",
    widgets: "Widgets",
  },
  widgets: {
    noItems: "There are no widgets in this dashboard",
  },
  wokspaces: {
    body: "Body",
    cascadeNotificationConfig: "Cascade notification config to the sub workspaces",
    cascadeNotificationConfigHint: "By checking this, all subsequent workspaces will be using this email provider, for sending emails. For products which run online as service, usually you want the parent workspace to configurate the mail server. You might uncheck this in larger products, which run globally, and each workspaces need to have their own subspaces, and email configuration",
    config: "Workspace Config",
    configurateWorkspaceNotification: "Configurate notification services",
    confirmEmailSender: "User signup confirm account email",
    createChildMode: "Create workspace as a sub workspace (must choose parent workspace)",
    createNewWorkspace: "New workspace",
    createSiblingMode: "Create workspace independently, and assign me as owner",
    customizedTemplate: "Customize template",
    disablePublicSignup: "Disable public passports registeration",
    disablePublicSignupHint: "If checked, no one can signup for this passport or its sub-workspaces. Basically, signup screen would be disabled for public",
    editWorkspae: "Edit workspace",
    emailSendingConfig: "Email Sending Configuration",
    emailSendingConfigHint: "Control how the system emails are being sent, customize the message, etc.",
    emailSendingConfiguration: "Email Sending Configuration",
    emailSendingConfigurationHint: "Control how the system emails are being sent, customize the message, etc.",
    forceEmailConfigToSubWorkspaces: "Force the sub workspaces to use these email configurations",
    forceEmailConfigToSubWorkspacesHint: "By checking this option, all sub workspaces, will be using this configuration, and their admins are not allowed to edit this. Choose this option on products which are running unknown clients in cloud. Do not add personalized content for this workspace in such scenarios",
    forceSubWorkspaceUseConfig: "Force the sub workspaces to use this provider configuration",
    forgetPasswordSender: "Forget password instructions",
    generalMailProvider: "General service that sends emails",
    invite: {
      createInvitation: "Create invitation",
      editInvitation: "Edit invitation",
      email: "Email address",
      emailHint: "Invitee email address, they will get the link using this email",
      firstName: "First name",
      firstNameHint: "Write the first name of invitee",
      forcePassport: "Force user to only signup or join with defined email or phone number",
      lastName: "Last name",
      lastNameHint: "Write the last name of inviteee",
      name: "Name",
      phoneNumber: "Phone number",
      phoneNumberHint: "Invitee phone number, they will get invitation using sms if you provide their number as well",
      role: "Role",
      roleHint: "Select the role(s) you want to give the user when they join the workspace. This can be changed later as well.",
      roleName: "Role name",
    },
    inviteToWorkspace: "Invite to workspace",
    joinKeyWorkspace: "Workspace",
    joinKeyWorkspaceHint: "The workspace which will be publicly avaialble",
    mailServerConfiguration: "Mail server configuration",
    name: "Name",
    notification: {
      dialogTitle: "Edit the mail template",
    },
    parentWorkspace: "Parent workspace",
    parentWorkspaceHint: "Select the parent workspace, which the new workspace belongs to",
    publicSignup: "Public user signup & Join Keys",
    publicSignupHint: "This software allows to public users join to this workspace and\n    it's\n    subsequent workspaces, by registering via email, phone number or other\n    types of the passports.\n    In this section you can enable, disable, and make some other\n    configurations.",
    resetToDefault: "Reset to default",
    role: "role",
    roleHint: "Select role",
    sender: "Sender",
    sidetitle: "Workspaces",
    slug: "Slug",
    title: "Title",
    type: "Type",
    workspaceCreationMode: "Workspace creation mode",
    workspaceCreationModeHint: "Workspace creation mode",
    workspaceName: "Workspace name",
    workspaceNameHint: "Enter the workspace name",
    workspaceTypeSlug: "Slug address",
    workspaceTypeSlugHint: "The path that publicly will be available to users, if they signup through this account this role would be assigned to them.",
    workspaceTypeTitle: "Title",
    workspaceTypeTitleHint: "The title of the Workspace",
  },
};
